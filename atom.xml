<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hyouka</title>
  
  
  <link href="https://chitanderu.github.io/atom.xml" rel="self"/>
  
  <link href="https://chitanderu.github.io/"/>
  <updated>2025-03-17T05:57:15.290Z</updated>
  <id>https://chitanderu.github.io/</id>
  
  <author>
    <name>夏夜繁星</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>大数据行销报告</title>
    <link href="https://chitanderu.github.io/2024/11/18/data-class/"/>
    <id>https://chitanderu.github.io/2024/11/18/data-class/</id>
    <published>2024-11-18T00:00:00.000Z</published>
    <updated>2025-03-17T05:57:15.290Z</updated>
    
    <content type="html"><![CDATA[<p><strong>标题</strong>：消费者在线教育行为分析：基于视频分析与机器学习的视频课程消费研究</p><p><strong>副标题</strong>：《Consumer Behavior in the Online Classroom: Using Video Analytics and Machine Learning to Understand the Consumption of Video Courseware》 <strong>作者</strong>：Mi Zhou, George H. Chen, Pedro Ferreira, Michael D. Smith</p><h2 id="研究背景"><a class="markdownIt-Anchor" href="#研究背景"></a> 研究背景</h2><ul><li>非结构化多媒体数据正在重塑管理实践<ul><li>目前80%的公司数据是非结构化的</li><li>非结构化数据增长速度比结构化数据快15倍</li><li>企业尚未充分利用这些数据</li></ul></li><li>视频是最关键的非结构化数据类型<ul><li>每日Facebook有80亿视频浏览量</li><li>YouTube每日提供10亿小时视频</li><li>预计到2022年，视频将占消费者互联网流量的82%</li></ul></li><li>在线教育市场迅速增长<ul><li>教育培训是一个7万亿美元的产业</li><li>美国77%的企业使用在线学习</li><li>疫情期间在线教育使用大幅增加</li><li>预计到2025年，在线教育市场将达到3500亿美元</li></ul></li></ul><h2 id="研究问题"><a class="markdownIt-Anchor" href="#研究问题"></a> 研究问题</h2><p>本研究旨在解决以下核心问题：</p><ol><li>在线视频的哪些关键特征会影响其被观看的程度？</li><li>平台如何使用可扩展和自动化的方法量化视频特征？</li><li>在线教学视频的特征如何预测消费者行为？</li></ol><h2 id="研究方法框架"><a class="markdownIt-Anchor" href="#研究方法框架"></a> 研究方法框架</h2><p><img src="https://pic1.imgdb.cn/item/67d7b7af88c538a9b5bfc554.png" alt="https://pic1.imgdb.cn/item/67d7b7af88c538a9b5bfc554.png" /></p><p><img src="https://pic1.imgdb.cn/item/67d7b7fb88c538a9b5bfc678.png" alt="https://pic1.imgdb.cn/item/67d7b7fb88c538a9b5bfc678.png" /></p><p>研究提出了一个创新的<strong>视频特征框架</strong>，包括三类特征：</p><ol><li>基本视频属性<ul><li>视频长度、演讲速度、场景长度、情感分析等</li></ul></li><li>讲师情绪与物理特征<ul><li>使用深度学习模型检测面部表情和情绪</li><li>分析讲师外观特征（年龄、性别、眼镜、微笑等）</li></ul></li><li>视觉美学特征<ul><li>动态特征：前景运动区域、运动幅度、运动方向</li><li>色彩特征：暖色调比例、饱和度、亮度、对比度、清晰度</li></ul></li></ol><h2 id="数据来源"><a class="markdownIt-Anchor" href="#数据来源"></a> 数据来源</h2><p>研究使用了两个独特的数据集：</p><ol><li>MasterClass数据集<ul><li>771个在线视频</li><li>超过260万观看记录</li><li>来自225,580名消费者</li><li>各领域专家（设计、新闻、编剧等）的教学视频</li></ul></li><li>Crash Course数据集<ul><li>1,127个视频</li><li>YouTube频道有超过1200万订阅者</li><li>传统教育学科内容（人工智能、哲学、统计学、世界历史等）</li></ul></li></ol><h2 id="视频特征分析方法"><a class="markdownIt-Anchor" href="#视频特征分析方法"></a> 视频特征分析方法</h2><h3 id="基本视频属性"><a class="markdownIt-Anchor" href="#基本视频属性"></a> 基本视频属性</h3><ul><li><strong>视频长度</strong>：以分钟计算，研究显示较短视频往往更具吸引力</li><li><strong>演讲速度</strong>：每分钟说话的词数，更快的语速往往与更高的用户参与度相关</li><li><strong>平均场景长度</strong>：使用PySceneDetect计算场景之间的平均时间</li><li><strong>情感分析</strong>：使用基于规则的模型分析字幕中的语言情感</li></ul><p><img src="https://pic1.imgdb.cn/item/67d7b88888c538a9b5bfc829.png" alt="https://pic1.imgdb.cn/item/67d7b88888c538a9b5bfc829.png" /></p><h3 id="讲师情绪与物理特征"><a class="markdownIt-Anchor" href="#讲师情绪与物理特征"></a> 讲师情绪与物理特征</h3><ul><li>使用微软研究院的预训练深度学习模型识别讲师表情</li><li>分析八种情绪：愤怒、蔑视、厌恶、恐惧、快乐、中性、悲伤和惊讶</li><li>估计外观特征：年龄、性别、眼镜、面部毛发、秃顶程度、发色、化妆、微笑</li></ul><h3 id="视觉美学特征"><a class="markdownIt-Anchor" href="#视觉美学特征"></a> 视觉美学特征</h3><ul><li><strong>动态特征</strong>：使用OpenCV计算前景/背景分割和光流分析</li><li><strong>色彩特征</strong>：分析色调、饱和度、亮度、对比度和清晰度</li></ul><h2 id="消费者行为测量"><a class="markdownIt-Anchor" href="#消费者行为测量"></a> 消费者行为测量</h2><p>研究通过两个二元变量测量消费者观看行为：</p><ol><li><strong>Y_complete</strong>：消费者是否看完整个视频</li><li><strong>Y_next</strong>：消费者是否观看课程中的下一个视频</li></ol><p>这些指标代表平台最关注的两个关键消费者行为指标。</p><h2 id="预测方法"><a class="markdownIt-Anchor" href="#预测方法"></a> 预测方法</h2><p>研究采用梯度提升机(GBM)算法预测消费者行为：</p><ul><li>使用80%的消费者数据作为训练集</li><li>通过5折交叉验证选择超参数</li><li>在测试集上评估模型性能</li><li>使用机器学习可解释性方法分析特征重要性：<ul><li>排列特征重要性(Permutation Feature Importance)</li><li><strong>Shapley值(SHAP)</strong>—&gt;补充</li><li></li></ul></li></ul><h2 id="研究结果"><a class="markdownIt-Anchor" href="#研究结果"></a> 研究结果</h2><h3 id="预测性能"><a class="markdownIt-Anchor" href="#预测性能"></a> 预测性能</h3><ul><li>预测消费者是否会观看完整视频的准确率：<strong>92%</strong></li><li>预测消费者是否会观看下一个视频的准确率：<strong>88%</strong></li></ul><h3 id="特征重要性分析"><a class="markdownIt-Anchor" href="#特征重要性分析"></a> 特征重要性分析</h3><p><strong>类别级特征重要性</strong>：</p><ul><li>消费者过去平均完成率是预测当前行为的最重要因素</li><li>基本视频属性(如视频长度)对预测有显著影响</li><li>讲师情绪和物理特征也显著影响观看行为</li></ul><p><strong>个体级特征重要性</strong>：</p><ol><li><p>观看完整视频的关键因素</p><p>：</p><ul><li>较长视频与更高完成率相关(在MasterClass环境中)</li><li>课程中较后的章节完成率较低</li><li>积极情绪的讲述内容增加完整观看概率</li><li>讲师情绪影响复杂，非线性关系</li><li>讲师年龄与观看完成率呈正相关</li><li>视觉特征中，动态和清晰度的影响呈非对称性</li></ul></li><li><p>观看下一个视频的关键因素</p><p>：</p><ul><li>消费者平均完成率仍有积极影响</li><li>较高的演讲速度对观看下一视频有负面影响</li><li>较强的情绪表达(如愤怒)与观看下一视频的概率呈正相关</li><li>亮度和清晰度较低的视频降低观看下一视频的概率</li></ul></li></ol><h3 id="稳健性检验结果"><a class="markdownIt-Anchor" href="#稳健性检验结果"></a> 稳健性检验结果</h3><p>研究将框架应用于Crash Course数据集，预测视频受欢迎程度的准确率达到<strong>85%</strong>，证明了该框架在不同视频消费环境中的适用性。</p><h2 id="研究贡献"><a class="markdownIt-Anchor" href="#研究贡献"></a> 研究贡献</h2><p>研究提供了四个主要贡献：</p><ol><li>开发了一个新的视频特征框架，能分析非结构化视频数据</li><li>证明了该框架可用于预测个人级别的消费者行为</li><li>证明了该框架可用于预测视频的总体受欢迎程度</li><li>提供了关于制作有效教学视频的可解释洞察</li></ol><h2 id="管理启示"><a class="markdownIt-Anchor" href="#管理启示"></a> 管理启示</h2><p>研究结果为在线教育平台提供了重要的管理启示：</p><ol><li><p>改进视频制作</p><p>：</p><ul><li>对于重要内容分配适当的时间</li><li>注意讲师情绪表达的复杂影响</li><li>确保视频有适当的动态变化，但避免过多</li><li>保持高清晰度和适当亮度</li></ul></li><li><p>个性化干预策略</p><p>：</p><ul><li>基于预测结果设计干预，提高用户参与度</li><li>为个别消费者定制内容和推荐</li></ul></li><li><p>新产品需求预测</p><p>：</p><ul><li>在视频上线前预测其潜在表现</li><li>测试不同版本的效果</li></ul></li></ol><h2 id="研究局限性"><a class="markdownIt-Anchor" href="#研究局限性"></a> 研究局限性</h2><ol><li>虽然研究测量了观看行为，但未能测量学习成果</li><li>研究分析了两个商业环境，未来研究应扩展到更广泛的环境</li><li>课程主题与特定讲师的&quot;匹配度&quot;可能影响观看行为</li><li>数据是观察性的，无法声称因果效应</li><li>关于消费者行为的数据仅限于测量视频观看量</li></ol><h2 id="未来研究方向"><a class="markdownIt-Anchor" href="#未来研究方向"></a> 未来研究方向</h2><ol><li>分析课程内容和视频如何影响消费者的学习成果</li><li>在非商业学习环境中分析视频特征的影响</li><li>调查课程主题与讲师之间的&quot;匹配度&quot;对观看行为的影响</li><li>进行实验研究分析视频特征对参与度的因果影响</li><li>利用更细粒度的消费者行为数据进行分析</li></ol><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><ul><li>研究开发了一个创新的视频特征框架，用于分析非结构化视频数据</li><li>框架包含三类特征：基本视频属性、讲师情绪与物理特征、视觉美学特征</li><li>研究表明这些特征可准确预测消费者的视频观看行为</li><li>视频特征对消费者参与度有复杂、非线性的影响</li><li>该框架为在线教育平台提供了有价值的工具，可用于改进视频内容和个性化用户体验</li></ul><h2 id="结束语"><a class="markdownIt-Anchor" href="#结束语"></a> 结束语</h2><p>随着视频在教育和更广泛的营销环境中变得越来越重要，理解非结构化视频数据并利用这些数据测量经济结果，为行业从业者和研究人员创造了令人兴奋的机会。本研究代表了向基于非结构化视频数据的数据驱动分析迈出的重要一步。</p><h2 id="额外补充-数据的详细训练过程"><a class="markdownIt-Anchor" href="#额外补充-数据的详细训练过程"></a> 额外补充-数据的详细训练过程</h2><h1 id="数据集和训练方法指标详细分析"><a class="markdownIt-Anchor" href="#数据集和训练方法指标详细分析"></a> 数据集和训练方法指标详细分析</h1><h2 id="masterclass数据集详情"><a class="markdownIt-Anchor" href="#masterclass数据集详情"></a> MasterClass数据集详情</h2><h3 id="数据收集"><a class="markdownIt-Anchor" href="#数据收集"></a> 数据收集</h3><ul><li><strong>视频数量</strong>：771个视频</li><li><strong>课程数量</strong>：32个不同课程</li><li><strong>视频质量</strong>：原始视频为高质量，分辨率为1920×1080像素</li><li><strong>总数据量</strong>：原始视频文件总大小约1.66TB</li><li><strong>处理后数据</strong>：为便于分析，视频转换为640×360像素，总大小约178GB</li><li><strong>辅助数据</strong>：每个视频都有对应的时间编码字幕文件</li></ul><h3 id="用户观看数据"><a class="markdownIt-Anchor" href="#用户观看数据"></a> 用户观看数据</h3><ul><li><strong>观看记录总数</strong>：超过260万观看记录</li><li><strong>用户数量</strong>：225,580名用户</li><li><strong>采样方法</strong>：从MasterClass所有用户中随机抽样</li><li><strong>记录内容</strong>：包含用户ID、观看的课程、观看的视频、观看了视频的百分比</li><li><strong>课程长度</strong>：MasterClass课程包含10到36个章节不等，每章一个视频</li></ul><h3 id="消费者行为指标"><a class="markdownIt-Anchor" href="#消费者行为指标"></a> 消费者行为指标</h3><ol><li><p>Y_complete</p><p>（完成指标）</p><ul><li>定义：消费者是否观看完整个视频</li><li>编码：完整观看=1，否则=0</li><li>数据集中的平均完成率：39.7%</li></ul></li><li><p>Y_next</p><p>（续看指标）</p><ul><li>定义：消费者是否观看课程中的下一个视频</li><li>编码：观看至少下一个视频5%=1，否则=0</li><li>数据集中的平均续看率：82.3%</li></ul></li></ol><h3 id="用户历史行为指标"><a class="markdownIt-Anchor" href="#用户历史行为指标"></a> 用户历史行为指标</h3><ul><li><strong>AvgCompletion</strong>：用户观看特定视频前的平均完成率</li><li>平均值：30.8%，用作预测模型的重要输入特征</li></ul><h2 id="crash-course数据集详情"><a class="markdownIt-Anchor" href="#crash-course数据集详情"></a> Crash Course数据集详情</h2><h3 id="数据收集-2"><a class="markdownIt-Anchor" href="#数据收集-2"></a> 数据收集</h3><ul><li><strong>视频数量</strong>：1,127个视频</li><li><strong>课程数量</strong>：39个不同课程</li><li><strong>内容类型</strong>：传统教育学科，包括统计学、计算机科学、物理、化学、生物等</li><li><strong>平台</strong>：YouTube频道，有超过1200万订阅者</li><li><strong>辅助数据</strong>：每个视频的时间编码字幕文件</li></ul><h3 id="用户观看数据-2"><a class="markdownIt-Anchor" href="#用户观看数据-2"></a> 用户观看数据</h3><ul><li><p>从第三方公司获取的历史浏览量和点赞数据</p></li><li><p>人气指标Y_popular</p><p>：</p><ul><li>定义：视频上传一年内的&quot;点赞&quot;数高于中位数=1，否则=0</li><li>用于验证框架在另一环境中的可行性</li></ul></li></ul><h2 id="特征提取方法详解"><a class="markdownIt-Anchor" href="#特征提取方法详解"></a> 特征提取方法详解</h2><h3 id="1-基本视频属性提取"><a class="markdownIt-Anchor" href="#1-基本视频属性提取"></a> 1. 基本视频属性提取</h3><p><strong>视频长度</strong></p><ul><li>直接测量视频的分钟数</li><li>MasterClass视频平均长度：11.61分钟，标准差：4.76分钟，范围：1.49-53.17分钟</li></ul><p><strong>说话速度</strong></p><ul><li>计算：字幕中的总单词数÷视频长度</li><li>平均说话速度：144.05单词/分钟，标准差：28.87</li></ul><p><strong>平均场景长度</strong></p><ul><li>使用PySceneDetect算法识别场景切换</li><li>计算场景之间的平均时间</li><li>平均场景长度：0.232分钟，标准差：0.116分钟</li></ul><p><strong>情感分析</strong></p><ul><li>使用Hutto和Gilbert (2014)的规则模型分析字幕</li><li>输出情感极性分数，范围从-1（极度负面）到1（极度正面）</li><li>平均情感得分：0.069，标准差：0.045</li></ul><h3 id="2-讲师情绪与物理特征提取"><a class="markdownIt-Anchor" href="#2-讲师情绪与物理特征提取"></a> 2. 讲师情绪与物理特征提取</h3><p><strong>情绪识别</strong></p><ul><li>使用微软研究院的预训练深度学习模型</li><li>每10秒提取一帧，应用情绪识别</li><li>识别8种情绪：愤怒、蔑视、厌恶、恐惧、快乐、中性、悲伤和惊讶</li><li>对视频中所有采样帧的测量取平均值</li></ul><p><strong>外观特征提取</strong></p><ul><li>使用相同的微软算法估计：<ul><li>年龄（平均值：52.38岁）</li><li>性别（89%识别为男性）</li><li>眼镜（40.4%带眼镜）</li><li>面部毛发（平均值：0.103）</li><li>秃顶程度（平均值：0.157）</li><li>发色（分类为几种颜色）</li><li>化妆（10.7%检测到化妆）</li><li>微笑（平均值：0.135）</li></ul></li></ul><h3 id="3-视觉美学特征提取"><a class="markdownIt-Anchor" href="#3-视觉美学特征提取"></a> 3. 视觉美学特征提取</h3><p><strong>动态特征</strong></p><ul><li><p>前景运动区域</p><p>：使用OpenCV中的前景/背景分割算法</p><ul><li>计算每帧中前景运动区域的百分比</li><li>平均值：0.201，标准差：0.101</li></ul></li><li><p>运动幅度和方向</p><p>：使用OpenCV中的密集光流算法</p><ul><li>测量像素级的运动幅度（以像素为单位）和方向（以度为单位）</li><li>运动幅度平均值：0.580，标准差：0.286</li><li>运动方向平均值：3.113，标准差：0.072</li></ul></li></ul><p><strong>色彩特征</strong></p><ul><li><p>暖色调比例</p><p>：帧中暖色像素（黄色、红色等）的比例</p><ul><li>平均值：0.633，标准差：0.176</li></ul></li><li><p>饱和度</p><p>：帧中所有像素的平均饱和度</p><ul><li>平均值：0.336，标准差：0.123</li></ul></li><li><p>亮度</p><p>：帧中所有像素的平均亮度</p><ul><li>平均值：0.300，标准差：0.126</li></ul></li><li><p>亮度对比度</p><p>：像素亮度的标准差</p><ul><li>平均值：0.199，标准差：0.034</li></ul></li><li><p>清晰度</p><p>：亮度足够的像素比例</p><ul><li>平均值：0.978，标准差：0.039</li></ul></li></ul><h2 id="模型训练方法详解"><a class="markdownIt-Anchor" href="#模型训练方法详解"></a> 模型训练方法详解</h2><h3 id="数据集分割"><a class="markdownIt-Anchor" href="#数据集分割"></a> 数据集分割</h3><ul><li>使用80%的消费者数据作为训练集</li><li>20%作为测试集</li><li>确保测试集中的消费者在训练集中不出现</li></ul><h3 id="特征使用策略"><a class="markdownIt-Anchor" href="#特征使用策略"></a> 特征使用策略</h3><ul><li>预测Y_complete：使用视频前20%的特征</li><li>预测Y_next：使用消费者实际观看部分的视频特征<ul><li>例如：消费者只看了40%的视频，则仅使用前40%的视频特征</li></ul></li></ul><h3 id="算法选择"><a class="markdownIt-Anchor" href="#算法选择"></a> 算法选择</h3><ul><li>主要使用梯度提升机(GBM)算法</li><li>原因：在各种不同应用的机器学习挑战中表现良好</li><li>用回归树作为基本模型预测残差</li></ul><h3 id="超参数选择"><a class="markdownIt-Anchor" href="#超参数选择"></a> 超参数选择</h3><ul><li>在训练数据内使用5折交叉验证</li><li>选择最佳超参数后在完整训练数据上训练</li></ul><h3 id="模型解释方法"><a class="markdownIt-Anchor" href="#模型解释方法"></a> 模型解释方法</h3><p><strong>类别级特征重要性</strong></p><ul><li>使用排列特征重要性策略(Permutation Feature Importance)</li><li>将三类视频特征视为单个大特征</li><li>计算方法：置换特征值后的预测误差÷原始预测误差</li></ul><p><strong>个体级特征重要性</strong></p><ul><li>使用SHAP(SHapley Additive exPlanations)方法</li><li>计算每个特征对每个预测的具体贡献</li><li>可视化方法：使用密度散点图展示所有特征对整个数据集的影响</li></ul><h2 id="模型性能结果"><a class="markdownIt-Anchor" href="#模型性能结果"></a> 模型性能结果</h2><h3 id="masterclass模型性能"><a class="markdownIt-Anchor" href="#masterclass模型性能"></a> MasterClass模型性能</h3><ul><li>预测Y_complete的平均准确率：92%（F1分数=0.91）</li><li>预测Y_next的平均准确率：88%（F1分数=0.85）</li><li>仅使用平均完成率特征的Y_complete准确率：74.38%</li><li>仅使用平均完成率特征的Y_next准确率：83%</li></ul><h3 id="crash-course模型性能"><a class="markdownIt-Anchor" href="#crash-course模型性能"></a> Crash Course模型性能</h3><ul><li>预测视频是否受欢迎(Y_popular)的准确率：85%</li><li>精确率：0.84，召回率：0.88</li><li>基本视频属性的特征重要性约为2.5</li><li>美学特征在预测Crash Course视频受欢迎度时重要性最高</li></ul><h2 id="论文中的shap值应用"><a class="markdownIt-Anchor" href="#论文中的shap值应用"></a> 论文中的SHAP值应用</h2><p>在这篇研究视频特征对消费者行为影响的论文中，作者使用SHAP值来理解：</p><ol><li><strong>特征重要性排序</strong>: 所有特征按其SHAP值之和排序，展示哪些特征对预测最重要。</li><li><strong>特征影响方向</strong>: SHAP值的正负表示特征值增加是提高还是降低了预测结果（如完成率、观看下一视频的概率）。</li><li><strong>特征值与影响关系</strong>: 通过颜色编码（红色表示高特征值，蓝色表示低特征值），展示特征值大小与其影响之间的关系。</li></ol><h2 id="论文中的发现示例"><a class="markdownIt-Anchor" href="#论文中的发现示例"></a> 论文中的发现示例</h2><p>以论文图15为例，SHAP值分析揭示了：</p><ul><li><strong>平均完成率(AvgComplete)</strong>: 用户过去较高的平均完成率(红色点)与更高的当前视频完成概率相关(SHAP值为正)</li><li><strong>视频长度(videoLen)</strong>: 较长的视频(红色点)实际上与更高的完成率相关(SHAP值为正)</li><li><strong>情绪特征</strong>: 讲师的情绪特征(如愤怒、惊讶)与完成率的关系复杂，表现为非线性影响</li><li><strong>章节编号(chapter)</strong>: 后面的章节(红色点)与较低的完成率相关(SHAP值为负)</li></ul><h2 id="shap值的优势"><a class="markdownIt-Anchor" href="#shap值的优势"></a> SHAP值的优势</h2><ol><li><strong>本地准确性</strong>: SHAP值能保证模型的预测值等于基线值加上所有特征的贡献。</li><li><strong>一致性</strong>: 如果模型改变，使某个特征对预测的贡献增加，那么这个特征的SHAP值也会增加。</li><li><strong>可视化友好</strong>: 通过SHAP值可以创建直观的可视化图表，帮助理解模型决策过程。</li></ol><p>在这篇论文中，SHAP值帮助研究者理解了复杂的非线性关系，比如视频特征如何精细地影响消费者的观看行为，这种理解对于制作更有效的教学视频提供了重要指导</p><p><img src="https://pic1.imgdb.cn/item/67d7ba0388c538a9b5bfcc1d.png" alt="https://pic1.imgdb.cn/item/67d7ba0388c538a9b5bfcc1d.png" /></p>]]></content>
    
    
    <summary type="html">圖片可點擊放大</summary>
    
    
    
    <category term="报告" scheme="https://chitanderu.github.io/categories/%E6%8A%A5%E5%91%8A/"/>
    
    
    <category term="cv" scheme="https://chitanderu.github.io/tags/cv/"/>
    
  </entry>
  
  <entry>
    <title>时间序列报告</title>
    <link href="https://chitanderu.github.io/2024/11/18/time-series-final/"/>
    <id>https://chitanderu.github.io/2024/11/18/time-series-final/</id>
    <published>2024-11-18T00:00:00.000Z</published>
    <updated>2024-11-21T13:26:31.376Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据集链接"><a class="markdownIt-Anchor" href="#数据集链接"></a> 数据集链接</h2><p>数据链接: <a href="https://www.kaggle.com/datasets/sumanthvrao/daily-climate-time-series-data">氣候數據</a></p><h2 id="数据集简介"><a class="markdownIt-Anchor" href="#数据集简介"></a> 数据集简介</h2><p>该数据集于想要训练印度气候天气预报模型的开发人员。该数据集提供了印度德里市2013年1月1日至2017年4月24日的数据。这里的4个参数是<br /><strong>平均温度</strong>、湿度、风速、平均气压。</p><h2 id="工具"><a class="markdownIt-Anchor" href="#工具"></a> 工具</h2><p>使用pytorch作爲工具，構建简单CNN+LSTM的模型对该天气数据集的平均温度时间序列进行预测。</p><h1 id="数据分析流程"><a class="markdownIt-Anchor" href="#数据分析流程"></a> 数据分析流程</h1><h2 id="数据读取-"><a class="markdownIt-Anchor" href="#数据读取-"></a> 数据读取-</h2><p>用pands读取数据，绘制时序图</p><img src="https://pic.imgdb.cn/item/673f160fd29ded1a8c023ddf.png" style="zoom:67%;" /><h2 id="白噪声检验"><a class="markdownIt-Anchor" href="#白噪声检验"></a> 白噪声检验</h2><p>对平均温度进行白噪声检验，由以下随机性检验的数据可得，数据具有明显的自相关性，可以进行时序预测</p><p><img src="https://pic.imgdb.cn/item/673f332bd29ded1a8c190a14.png" alt="" /></p><h2 id="自相关系数"><a class="markdownIt-Anchor" href="#自相关系数"></a> 自相关系数</h2><p><img src="https://pic.imgdb.cn/item/673f3349d29ded1a8c19242e.png" alt="" /></p><p></p><h2 id="描述性统计"><a class="markdownIt-Anchor" href="#描述性统计"></a> 描述性统计</h2><p>​                                               <img src="https://pic.imgdb.cn/item/673f3361d29ded1a8c19371c.png" style="zoom:50%;" /></p><h1 id="模型训练"><a class="markdownIt-Anchor" href="#模型训练"></a> 模型训练</h1><h2 id="数据归一化"><a class="markdownIt-Anchor" href="#数据归一化"></a> 数据归一化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> MinMaxScaler</span><br><span class="line"><span class="comment"># 创建MinMaxScaler对象</span></span><br><span class="line">scaler = MinMaxScaler()</span><br><span class="line"><span class="comment"># 将数据进行归一化</span></span><br><span class="line">meantemp = scaler.fit_transform(meantemp.reshape(-<span class="number">1</span>,<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>数值范围统一化：</p><ul><li>将所有数据映射到[0,1]区间</li><li>有利于消除量纲影响</li><li>使模型更容易收敛</li></ul><p>提高模型训练效果：</p><ul><li>避免因数值差异过大导致的梯度爆炸或消失</li><li>加快模型收敛速度</li><li>提高模型训练的稳定性</li></ul><h2 id="创建时间序列滑动窗口数据"><a class="markdownIt-Anchor" href="#创建时间序列滑动窗口数据"></a> 创建时间序列滑动窗口数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">split_data</span>(<span class="params">data,time_step=<span class="number">12</span></span>):</span><br><span class="line">    dataX=[]</span><br><span class="line">    datay=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)-time_step):</span><br><span class="line">        dataX.append(data[i:i+time_step])</span><br><span class="line">        datay.append(data[i+time_step])</span><br><span class="line">    dataX=np.array(dataX).reshape(<span class="built_in">len</span>(dataX),time_step,-<span class="number">1</span>)</span><br><span class="line">    datay=np.array(datay)</span><br><span class="line">    <span class="keyword">return</span> dataX,datay</span><br></pre></td></tr></table></figure><p>参数data: 输入的时间序列数据</p><p>参数time_step=12: 时间窗口大小，默认使用12个时间步</p><p>表示用前12天的数据来预测第13天的数据</p><p>这种数据处理方式的优点：</p><ol><li><p>适合时间序列预测</p></li><li><p>保留了时序依赖关系</p></li><li><p>符合LSTM等循环神经网络的输入要求</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">原始数据: [T1, T2, T3, T4, T5, T6, T7, ...]</span><br><span class="line"></span><br><span class="line">转换后：</span><br><span class="line">输入X          输出y</span><br><span class="line">[T1,T2,T3] -&gt; T4</span><br><span class="line">[T2,T3,T4] -&gt; T5</span><br><span class="line">[T3,T4,T5] -&gt; T6</span><br><span class="line">[T4,T5,T6] -&gt; T7</span><br></pre></td></tr></table></figure></li></ol><h2 id="划分训练集和测试集的函数"><a class="markdownIt-Anchor" href="#划分训练集和测试集的函数"></a> 划分训练集和测试集的函数</h2><p>参数说明：</p><ul><li><p>dataX：特征数据集</p></li><li><p>datay：标签数据集</p></li><li><p>shuffle：是否打乱数据，默认True</p></li><li><p>percentage：训练集比例，默认0.8（80%）</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">def train_test_split(dataX,datay,shuffle=True,percentage=0.8):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    将训练数据X和标签y以numpy.array数组的形式传入</span><br><span class="line">    划分的比例定为训练集:测试集=8:2</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    if shuffle:</span><br><span class="line">        random_num=[index for index in range(len(dataX))]</span><br><span class="line">        np.random.shuffle(random_num)</span><br><span class="line">        dataX=dataX[random_num]</span><br><span class="line">        datay=datay[random_num]</span><br><span class="line">    split_num=int(len(dataX)*percentage)</span><br><span class="line">    train_X=dataX[:split_num]</span><br><span class="line">    train_y=datay[:split_num]</span><br><span class="line">    test_X=dataX[split_num:]</span><br><span class="line">    test_y=datay[split_num:]</span><br><span class="line">    return train_X,train_y,test_X,test_y </span><br></pre></td></tr></table></figure><p>将数据以8比2进行拆分，并且随机打乱索引顺序 ，</p><h2 id="构建cnnlstm神经网络"><a class="markdownIt-Anchor" href="#构建cnnlstm神经网络"></a> 构建CNN+LSTM神经网络</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CNN_LSTM</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, conv_input,input_size, hidden_size, num_layers, output_size</span>):</span><br><span class="line">        <span class="built_in">super</span>(CNN_LSTM,self).__init__()</span><br><span class="line">        self.hidden_size = hidden_size</span><br><span class="line">        self.num_layers = num_layers</span><br><span class="line">        self.conv=nn.Conv1d(conv_input,conv_input,<span class="number">1</span>)</span><br><span class="line">        self.lstm = nn.LSTM(input_size, hidden_size, num_layers, batch_first=<span class="literal">True</span>)</span><br><span class="line">        self.fc = nn.Linear(hidden_size, output_size)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x=self.conv(x)</span><br><span class="line">        h0 = torch.zeros(self.num_layers,x.size(<span class="number">0</span>), self.hidden_size) <span class="comment"># 初始化隐藏状态h0</span></span><br><span class="line">        c0 = torch.zeros(self.num_layers,x.size(<span class="number">0</span>), self.hidden_size)  <span class="comment"># 初始化记忆状态c0</span></span><br><span class="line">        <span class="comment">#print(f&quot;x.shape:&#123;x.shape&#125;,h0.shape:&#123;h0.shape&#125;,c0.shape:&#123;c0.shape&#125;&quot;)</span></span><br><span class="line">        out, _ = self.lstm(x, (h0, c0))  <span class="comment"># LSTM前向传播</span></span><br><span class="line">        out = self.fc(out[:, -<span class="number">1</span>, :])  <span class="comment"># 取最后一个时间步的输出作为预测结果</span></span><br><span class="line">        <span class="keyword">return</span> out</span><br></pre></td></tr></table></figure><ul><li>CNN层用于特征提取</li><li>LSTM层处理时序关系</li><li>全连接层做最终预测</li></ul><ol><li>前向传播过程：</li></ol><p>输入 x -&gt; CNN -&gt; LSTM -&gt; 取最后时间步 -&gt; 全连接层 -&gt; 输出</p><ol><li>各层功能：</li></ol><ul><li>CNN层：<ul><li>使用1x1卷积</li><li>提取局部特征</li><li>保持输入输出通道数相同</li></ul></li><li>LSTM层：<ul><li>batch_first=True表示输入形状为(batch, seq, feature)</li><li>处理时序依赖关系</li><li>多层LSTM叠加</li></ul></li><li>全连接层：<ul><li>将LSTM输出映射到目标维度</li><li>只使用最后一个时间步的输出</li></ul></li></ul><ol><li>模型特点：</li></ol><ul><li>结合了CNN和LSTM的优势</li><li>CNN提取空间特征</li><li>LSTM捕捉时序关系</li><li>适合时间序列预测任务</li></ul><h2 id="输入参数进行训练"><a class="markdownIt-Anchor" href="#输入参数进行训练"></a> 输入参数，进行训练</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">test_X1=torch.Tensor(test_X)</span><br><span class="line">test_y1=torch.Tensor(test_y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义输入、隐藏状态和输出维度</span></span><br><span class="line">input_size = <span class="number">1</span>  <span class="comment"># 输入特征维度</span></span><br><span class="line">conv_input=<span class="number">12</span></span><br><span class="line">hidden_size = <span class="number">64</span>  <span class="comment"># LSTM隐藏状态维度</span></span><br><span class="line">num_layers = <span class="number">5</span>  <span class="comment"># LSTM层数</span></span><br><span class="line">output_size = <span class="number">1</span>  <span class="comment"># 输出维度（预测目标维度）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建CNN_LSTM模型实例</span></span><br><span class="line">model =CNN_LSTM(conv_input,input_size, hidden_size, num_layers, output_size)</span><br><span class="line"></span><br><span class="line"><span class="comment">#训练周期为500次</span></span><br><span class="line">num_epochs=<span class="number">500</span></span><br><span class="line">batch_size=<span class="number">64</span><span class="comment">#一次训练的数量</span></span><br><span class="line"><span class="comment">#优化器</span></span><br><span class="line">optimizer=optim.Adam(model.parameters(),lr=<span class="number">0.0001</span>,betas=(<span class="number">0.5</span>,<span class="number">0.999</span>))</span><br><span class="line"><span class="comment">#损失函数</span></span><br><span class="line">criterion=nn.MSELoss()</span><br><span class="line"></span><br><span class="line">train_losses=[]</span><br><span class="line">test_losses=[]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p></p><p><img src="https://pic.imgdb.cn/item/673f337bd29ded1a8c194d9e.png" alt="" /></p><h2 id="数据反归一化计算mse误差"><a class="markdownIt-Anchor" href="#数据反归一化计算mse误差"></a> 数据反归一化+计算mse误差</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">train_X1=torch.Tensor(X_train)</span><br><span class="line">train_pred=model(train_X1).detach().numpy()</span><br><span class="line">test_pred=model(test_X1).detach().numpy()</span><br><span class="line">pred_y=np.concatenate((train_pred,test_pred))</span><br><span class="line">pred_y=scaler.inverse_transform(pred_y).T[<span class="number">0</span>]</span><br><span class="line">true_y=np.concatenate((y_train,test_y))</span><br><span class="line">true_y=scaler.inverse_transform(true_y).T[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;mse(pred_y,true_y):<span class="subst">&#123;mse(pred_y,true_y)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">训练数据 -&gt; 预测 -&gt; 反归一化</span><br><span class="line">测试数据 -&gt; 预测 -&gt; 反归一化</span><br><span class="line">                ↓</span><br><span class="line">            合并结果</span><br><span class="line">                ↓</span><br><span class="line">            计算误差</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mse(pred_y,true_y):5.5372205189883985</span><br></pre></td></tr></table></figure><p>获取完整的预测结果</p><p>将结果转换回原始尺度</p><p>评估模型性能</p><p>对于天气温度预测：</p><ul><li>MSE &lt; 4: 非常好</li><li>4 ≤ MSE &lt; 6: 良好（当前模型处于这个范围）</li><li>6 ≤ MSE &lt; 9: 一般</li><li>MSE ≥ 9: 需要改进</li></ul><p><img src="https://pic.imgdb.cn/item/673f338cd29ded1a8c195cdb.png" alt="" /></p><h2 id="额外测试集测试"><a class="markdownIt-Anchor" href="#额外测试集测试"></a> 额外测试集测试</h2><p>挑选了后面未参与模型训练的时间步来检验泛化效果，拟合后如下，蓝色为预测值，橙色为真实值。可观察到趋势基本一致。</p><p><img src="https://pic.imgdb.cn/item/673f339ad29ded1a8c1968ec.png" alt="" /></p>]]></content>
    
    
    <summary type="html">圖片可點擊放大</summary>
    
    
    
    <category term="报告" scheme="https://chitanderu.github.io/categories/%E6%8A%A5%E5%91%8A/"/>
    
    
    <category term="lstm" scheme="https://chitanderu.github.io/tags/lstm/"/>
    
  </entry>
  
  <entry>
    <title>时间序列</title>
    <link href="https://chitanderu.github.io/2024/06/13/timeserise/"/>
    <id>https://chitanderu.github.io/2024/06/13/timeserise/</id>
    <published>2024-06-13T14:24:39.000Z</published>
    <updated>2024-10-06T10:55:10.816Z</updated>
    
    <content type="html"><![CDATA[<h2 id="lstm部分"><a class="markdownIt-Anchor" href="#lstm部分"></a> LSTM部分</h2><h3 id="lstm的基本概念"><a class="markdownIt-Anchor" href="#lstm的基本概念"></a> lstm的基本概念</h3><p>在使用RNN处理一些时间序列时，在训练过程中常遇到的一个严重问题。梯度消失会导致模型无法学习到远距离的依赖关系，特别是在处理长序列数据时效果不佳，因此为了更好的对长时间序列进行更好的处理，LSTM出现了，LSTM（Long Short-Term Memory）是一种常用的递归神经网络（RNN）变体，专门设计用于处理和预测基于时间序列数据的长时间依赖性问题。由于时间序列数据中的模式往往具有长期依赖性，普通的RNN在处理长序列时容易出现梯度消失或梯度爆炸问题，而LSTM通过引入“记忆单元”和“门机制”有效解决了这一问题.</p><h4 id="lstm的公式"><a class="markdownIt-Anchor" href="#lstm的公式"></a> LSTM的公式</h4><p>LSTM有三个关键的门控机制：</p><ul><li><p><strong>遗忘门（Forget Gate）</strong>：决定应该丢弃哪些信息；</p></li><li><p><strong>输入门（Input Gate）</strong>：决定哪些信息应该存储到记忆单元中；</p></li><li><p><strong>输出门（Output Gate）</strong>：决定最终哪些信息作为输出。</p><p><img src="https://pic.imgdb.cn/item/67026592d29ded1a8c26efce.png" alt="" /></p></li></ul><h3 id="lstm与传统时间序列预测的区别"><a class="markdownIt-Anchor" href="#lstm与传统时间序列预测的区别"></a> LSTM与传统时间序列预测的区别</h3><ul><li><strong>线性与非线性处理</strong>：传统的时间序列预测方法，如ARIMA，依赖于时间序列的线性假设，适合处理平稳且线性的时间序列。而LSTM是一种非线性方法，它能够捕捉数据中的复杂非线性模式，这使得它在处理现实中复杂多变的时间序列（如PM2.5浓度预测）时更为有效。</li><li><strong>长期依赖关系</strong>：ARIMA等传统方法只能处理短期依赖关系，LSTM通过其记忆单元，能够处理较长的时间依赖关系。因此，LSTM在需要长时间依赖关系的时间序列预测中表现更好。</li><li><strong>自适应性</strong>：传统的时间序列方法需要进行大量的假设（如平稳性、白噪声等），而LSTM通过神经网络的训练可以自适应地学习时间序列中的特征，而不需要对数据进行过多的预处理。</li></ul><h2 id="paper部分-fine-tuning-of-predictive-models-cnn-lstm-and-conv-lstm-for-nowcasting-pm25-level"><a class="markdownIt-Anchor" href="#paper部分-fine-tuning-of-predictive-models-cnn-lstm-and-conv-lstm-for-nowcasting-pm25-level"></a> paper部分 -Fine-Tuning of Predictive Models CNN-LSTM and  CONV-LSTM for Nowcasting PM2.5 Level</h2><h3 id="关键算法说明"><a class="markdownIt-Anchor" href="#关键算法说明"></a> 关键算法说明</h3><h4 id="1-cnn-lstm算法公式"><a class="markdownIt-Anchor" href="#1-cnn-lstm算法公式"></a> 1. <strong>CNN-LSTM算法公式</strong></h4><p>在这篇论文中，研究者结合了CNN和LSTM两种模型来预测PM2.5浓度。<strong>CNN-LSTM</strong>模型结合了卷积神经网络（CNN）和长短期记忆网络（LSTM），通常包含以下几个步骤：</p><h4 id="cnn部分"><a class="markdownIt-Anchor" href="#cnn部分"></a> CNN部分</h4><p>CNN部分用于从输入数据中提取局部特征。假设我们有一个输入序列 x，长度为 n ，CNN的卷积操作可以表示为：</p><img src="https://pic.imgdb.cn/item/6702674cd29ded1a8c2865a4.png" style="zoom:50%;" /><h4 id="lstm部分-2"><a class="markdownIt-Anchor" href="#lstm部分-2"></a> LSTM部分</h4><p>将CNN提取的特征 作为LSTM的输入。LSTM的更新公式如下：</p><h4 id="2conv-lstm算法公式"><a class="markdownIt-Anchor" href="#2conv-lstm算法公式"></a> 2.CONV-LSTM算法公式</h4><p><strong>CONV-LSTM</strong>模型将卷积操作直接嵌入LSTM单元中，能够同时捕捉时间和空间的特征。CONV-LSTM的关键公式如下：</p><p>在CONV-LSTM中，输入、遗忘和输出门的计算都使用卷积操作：</p> <img src="https://pic.imgdb.cn/item/66fe84da335a200d6aa6893d.png" style="zoom:50%;" /><p>记忆单元的更新同样采用卷积运算：</p><h3 id="研究目的"><a class="markdownIt-Anchor" href="#研究目的"></a> 研究目的：</h3><p>这篇论文的主要目的是利用深度学习中的CNN-LSTM和CONV-LSTM模型对雅加达Kemayoran地区PM2.5浓度进行预测.(其中CONV-LSTM是CNN-LSTM的改进版本，在lstm中引入卷积计算，两种方法思路基本一致)研究希望通过这两种模型的比较，找到最适合的模型来进行短期（24小时内）的空气质量预报，以减少PM2.5污染对公众健康的影响。在这篇论文中，使用了lstm作为时间序列预测的方法。</p><h3 id="数据"><a class="markdownIt-Anchor" href="#数据"></a> 数据：</h3><p>使用的数据来自印尼中央气象、气候和地球物理局（BMKG），包含从2022年5月21日到2022年6月21日Kemayoran地区的PM2.5浓度的每小时观测值，总共收集了1488条数据。由于数据中存在异常值（如设备维护不当导致的错误），研究通过样条插值法处理缺失数据，并对数据进行z-score标准化，以保持数据平衡.</p><h3 id="方法"><a class="markdownIt-Anchor" href="#方法"></a> 方法：</h3><p>论文使用了CNN-LSTM和CONV-LSTM两种混合模型来预测PM2.5浓度。CNN-LSTM模型首先利用CNN提取时间序列数据的特征，然后将这些特征作为LSTM的输入，LSTM则用于捕捉时间序列的短期和长期依赖关系。相比之下，CONV-LSTM将卷积操作与LSTM相结合，在LSTM单元内执行卷积运算，从而同时处理时空相关性。</p><h3 id="结论"><a class="markdownIt-Anchor" href="#结论"></a> 结论：</h3><h3 id="2-cnn-lstm模型的预测效果"><a class="markdownIt-Anchor" href="#2-cnn-lstm模型的预测效果"></a> 2. CNN-LSTM模型的预测效果：</h3><p>CNN-LSTM模型的测试效果总结如下：</p><ul><li><strong>训练集</strong>的最佳分割比（90:10）下，CNN-LSTM模型的MAE为<strong>4.94</strong>，RMSE为<strong>6.83</strong>，MAPE为<strong>23.91%</strong>。</li><li><strong>验证集</strong>中，MAPE的最佳值为<strong>17.86%</strong>。</li><li><strong>测试集</strong>中，MAE为<strong>7.35</strong>，RMSE为<strong>9.32</strong>，MAPE为<strong>17.92%</strong>。</li></ul><p>可以看出，在测试集中，CNN-LSTM的MAPE为<strong>17.92%</strong>，这表明预测结果的误差百分比在实际值的**17.92%**左右。根据论文的标准，MAPE值小于20%可以认为模型的预测效果是“足够好”的。因此，CNN-LSTM模型在PM2.5预测中表现较好。</p><h3 id="3-conv-lstm模型的预测效果"><a class="markdownIt-Anchor" href="#3-conv-lstm模型的预测效果"></a> 3. CONV-LSTM模型的预测效果：</h3><p>CONV-LSTM模型的表现相对CNN-LSTM更为优秀：</p><ul><li><strong>训练集</strong>中，CONV-LSTM在90:10的分割比下，MAE为<strong>4.70</strong>，RMSE为<strong>6.50</strong>，MAPE为<strong>23.17%</strong>。</li><li><strong>验证集</strong>中，MAPE的最佳值为<strong>18.18%</strong>。</li><li><strong>测试集</strong>的MAE为<strong>6.52</strong>，RMSE为<strong>8.55</strong>，MAPE为<strong>16.39%</strong>。</li></ul><p>与CNN-LSTM模型相比，CONV-LSTM的各项指标都要优越一些。在测试集上的MAPE为<strong>16.39%</strong>，比CNN-LSTM的**17.92%**更低。这意味着CONV-LSTM的误差比例相对更小，预测的准确性更高。</p><p>通过模型评估，CONV-LSTM模型的预测精度优于CNN-LSTM。CONV-LSTM的MAE（平均绝对误差）为6.52，RMSE（均方根误差）为8.55，MAPE（平均绝对百分比误差）为16.39%，显示了其在处理PM2.5预测时的更高性能。研究表明，这一混合模型能够为实时空气质量监测提供更准确的预测结果。</p>]]></content>
    
    
    <summary type="html">None</summary>
    
    
    
    <category term="代码" scheme="https://chitanderu.github.io/categories/%E4%BB%A3%E7%A0%81/"/>
    
    
    <category term="时间序列" scheme="https://chitanderu.github.io/tags/%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>随便的记录</title>
    <link href="https://chitanderu.github.io/2023/12/10/2024/"/>
    <id>https://chitanderu.github.io/2023/12/10/2024/</id>
    <published>2023-12-10T00:00:00.000Z</published>
    <updated>2024-09-25T16:15:26.382Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="43dafb17a758ea74ea6ff8f414a6bbf1966d3f806e0fdb081acd30d63c535163">028b96e947fae567653133ee0cb0272dbba98310a180b0fd9cebcb1fa2057570d9f8b16be9234cbe05587dca085afbc9d86e9cf2f4fb4ab0c01dc24e8e118d2e7e72bfb3ad9ef82de78cef96577fc50afe6593b6323da0d97b00606a836a3c1dbfc6fc4ee60d2e80c202f86115133ea54d54e091485ccb090f2d3aba7c8bfc28f310410db36e5ccbb1b889d0502097b8ae68fc488b3cbb40c1f0279a65a22897f29dfc7b196fe0ad2f884bbab0dafa511310de6f98d09cddeab52442c13aa4577ce10f7cdda191ee7e48af3f043c44c1330e7feb91c4341ca7e161eb518fb13e2e0e360da75c47b2e57eb05c159d0c5b9cb9ff333ec7b4b4b4784205acfcee8afbf659b111f47a03ce9899ce322fbf33509515d00d100850e05528d7154392e81e3f160abceb6337a9d986b86c42cf3f4d3fa7c1dab62bb2045d64d4b634e6d5452cc5ed3195f75a2a61acd62c1d234a86735aeda7d66219b312502c064229e4e8118e503b1cae9a5519a2e31183d5d2e3d1e69ca8ac57a40e40bcd0440633e29ba8d49a3e458f23139791eee9f63cb75dd419358436ac5534e6bbceef0005f1c21f0238fca447991178d1b2cb937db9f730efe61a2535a598411b20c3dda4a826fa87458a1361c343c420b1d6bef55dc5b3d52f9f1300042c1be08de37f3203b08ccdfc8c895c57509ca625b24bbdecb8dbd857548d6de2536277ccdd45b4575505d3e5fbfae909914013e00a53203d9ca4abb0fc9b4625c960a6d2c5f19066055c6de3bd2707095ea0e654cbcdd77dd49c27687eda1f733689a8267c1caf50e278fa4bd3c34565ba280f8ea0bd453a16be7f4a37e055f1c45dc363164a225165fede617ecc057c436976ecc822505c0504b4543f943922022dd193705f8e533bef4f310e55993ec0a706088300db94472833fd9a4e4028b0b02af2929784808077cbed59de188fccc8b80589d83090429a0f46b59f7f525e35ef364095263ae40ff9b7c12e136c17ec315e85a18619c418ea08aa50272e47c2d81c812c9c2a826166dfacdf396a008a2a1eddba70e7dd48d4cb3d98d235b3c4d71145d31b9a8d801acc5a10d2c02ebfee921fd32d8f2422761a99787e764e448d62c152a2df5667d3a6dfa7010653912fe5a158839048e26a3bb5f7da4cb73fc8915a4d53999e22073f5e64cfc0110db76602015a65f97835c3885104f9f1090b4f034b385e541b174d712fbf975a80dc582fa8b55113471d59cbb3bc25d9b04e0408a80f9b237a40e5039d4c839c7af58ea392795410052e6b751f29ccc819e47d8eb09444250a45b2bf387324ad29afd3ff3ce67e57b100ad142590b0dce1ccdea54ebeeb8d18c79f0e8c32d850da6a424652fbfb31b3773e4fc0e13cb72ff9b03b601d0496bfcab7b8d1ca642abd9aa2dc8c5778d5fc48a22e31eecb15bece3e8145f04dc883f3bdaa08cd300ba0369bf1c9df4bf59e71a6d674676addf42ed7dc86334b4c488ac5f9a0ea09f8c0453df5b483f44abb0bf2a1166f5a0852d05cadefd4b7f53fccec1756162290d2e3caa8ab36434286fe063e43361cdd57e079e65c6689ccc978bbcaf6358a66eb90f45c72740a08424c918d174abc667b0c7052764a571147382d0e3ed3b8c6132f9d227cb6abe4ffd878926267c13809ff1cf36a5730fd97ff34a9a5866cfa59b8504606be594e3450a7489a17d8b5206dc90856872a9df35b10d308b5c63b08fecbd24dae7cfa2afb5af556451b444baf61d1aa17267b7cd0c08851c7cf57f473e1f918cfc2d007e5c37c56159469d1c6229da0d7ce8aceeabb10b2775d17d139ee8c89c0f056776539b1da1644343bbf22b440258a39e289e2d68002c057bc1b260032795bb2b09ed939273d46bdbe9918a266ec9c54d4fb0830f3b2c16296133b55a66ff82384c1448d83c34815706c582e104a85554f4d080be24ece60bd41f051cdc451e148a5d17cc0056d59c948ccc0d8729a866e09c20d6e27e328bd8de8704cddd05c72de5c99748cab1fc5074b0ad1f9ae2b8b9b6c34a7f01928e87d5851e0aec89928a65f86546581e8cf6668eac596deb44973fc087d26d220163809357ad55d919f65cde9e30797da0489dd654fd3eb5ce2b444375d427ae76ea5fce1e5271c17b442600cf856007a673463823dcc62a66d9a85c15d56a8f34430c126f0b1741e0ae18c6b0b53a94dbf911c7384e1c5f943e0ea77785dc4a2f8a1fdcdd488ac5329892e7a40df104fa6bf1a82b952bbc720d8f14ef64f8bbf214284b72ac2150b18c7e424232650d2f6488aa508c82dfe6caeb3816156282666b4529fa2eb0201797808666ae69375323f5949e6837379e3d25aa83d9429cbe61874a7cec2ca52527148228b8f4c5c7288c200cc55ee4acd00ef0f7b787c141f4dd76a5e11d1abba4f7e3dc92753d760693fa71e1309ca98bb268cedaa7ea3e861e716d7f1b4770d6952f02216f9e7754acdcf79daa64bdb44a5d8544db6ec541c7d6fc1a4a8d8c47c2f96cbe9b68a0dac2337d29a0b26ade4b9c9ccf2c1e58f09a4f88076fc5072a3faa9b90910cf21feae3aed9ccbfef4dadd17e57dfbb1d20f5390f108dee86acb9b68e8a102efedb2b46e5f346642d2084c1d59c1af7724648fc50930229000e33725b6f77fd80f14f788e25ce977d28ef3608f12f4a5437b56db658677589b4c229a22a1bdfe01de5c5117516a5885d16812135cf657ad5688e47b426037503803250975fd3cf9337363714fef6094fffe80db1c95b5ac1aea1be2981a55edaec8edf6d250b1ff7d75ab46410ce5c0c96daa12428a4c0bc2273b07ffd54985ad2eb135c2f998cdb1de6546fa02d5c03d59487791a85a0e2ab51d77331ae7b4a85de1426822ea0d87f8f9f6a940b40abc371d267e66a50bf63b835815f7c8083c339f824ed16aa0f9c275c8ba6cd188fd606878e3fb329f3a50f916df901b004a767c931ab5db6096dbf6342547986767c333dd220577f8c84efa98340802c347812e34ef6133fd12dbb311e5ecc1b7675ea19c56b40d6c7bc9bb9bf48d13af36156608c34a116bc741102c1dbddafc2067494524fe3efc57b0ad9137e655ecebcb274a3b8ba9b1b2af831dd072e3a1344b55e8558b876303f7754fd453067d300324a595f1fc55dfd7b8909039b5b2a505e19f41df3af8f01b7dd0e650c316f7277dc3e34c6e4a2b4293d27530f2b78ec529000162d04e5500aeaa7a0b5f86c42eb0421f9ee401a2454108f2ffff090b05b78b995b635ca3a154ac5a4fb6fcf744f2b2d4dfdfc53de04f98f4d96e2f94ce90124c02aa8001db7b29a65100b4788589d5a3b1ccf3097999c4e24cedbc40e6eb157f2d3c95f06cc67d60d2e182b833160859e1e84b286bb75717e45b6a998d0c9a3e4ed9fcd782ac261ff7b41ba7276d3bcd0337f8d2eb0dc434b92b5106fc66340d272a8f5ed2fcbba329238a04b86b9dcfb545ffdb95e21d8a4148370a68503fd9d03593cf081dc79af08fe028882c131ec92aad0191bc2c99d0d59d37fb21e32eeab7f29ca70636132d44c06f132d01c62bcaa55352979ebfdb8b7a58f1f4badb09b47bf43e831c8877acf828acf74965e443f16940265e2d3e8228b196b06aafe251d2683ceec3258c0e2c96a8f62e2d11e26b8c12c23b0b7d15bcc23a70bdbe3fd8f1f2df2b330ad4b2b45421090bf506820aeeb6af32dcc35fa54e94f76cbbb49d037ca22a4806f20f4caf6f64fb3e479853fcda85c380b4f0429f73185487f358c41f39d70f520a3d6fa50a51e91a29ab14f2a8bb1ed679678a08d5914838234b65fc67ec8d1f2eb0828cf5a043038648be46500359862d10b406002591a23db46487a3c9977ec18da1ccc6a1586715425e3df7928a16af170bc8fb285f7eb921038d50bbe7e701c073654186dabb6edde2834b998cd1ed12691da0f3c45e14a1ed67d858a729d342023b5ec495777738dab1d4a6b6e056d1d313c2d87231818f386496c59fd4f2b075c637e848cc422fe7be0c04a54aa395a7f61fbff76cf684ee7ca03e7c17db99ae89ac5ae89961fc44097aaf48ffe72648a94225ea4f8a5db93bcf34ec9efddc548b35cefe7b18c8bc632feaf82641dc790fb2e863dd0f12be7fcb2afe1697251c85823e22958c20f6bebed112caf9dd10ef156912308ff7568bd315ae3af98dc68af54b3d52a9bb1297d6ebffd8d8eb18281ff69cfa737086cf24a2d4aac942d98eaa012cf15e9ca4c5bb78d31b5c283bc5657d69a9cbe16790e9626da6acdfc4f04d32595e8b746df5eeec0b51a6b62282607a27c6ef40be7d1ec13974413b7844516fbc029de50ab5cee584bb44913a1d5690bcc0ade01bb9c520128d9ac0f4b77afaf2e89fe69027ed61952c7c416fb93f65cf8d8367626bfd1957c6bbc6976f340ed32470b572e003d090a3a5d5059952a7a8a0d931916c604d8f1c9d52dfe9ae1222da003fa94498f03569d4ecb8347680233d116daba7277cacf96406180f865b5277516d4b435253dcac9536eb4a254a3d02fe64d4ff74ee0adabe991af9cb9a8abdf433d6f03b22459aaa4cdfc070411202ca0befef73e90ab995bf150c14ced340b4ebf8c3892fc340f6c51b339f0a3bf795a7bf98bbd438e77e6de51e4e07a1e7f5481b7a167060ade6b697aae7a177c7c0780e1101bee2f3bd0997863e9bdd0ecdd32190e28ec15fdfbb5ff12b3ccc3c854ab6cb14e0071a48a0f69827de92c4659d896d78cbf8f1919839e37cbaaa26b358cfa88d70aece005762d76d45efa79354e27fe158da298e4a114d4e0c3bcc951d51d881c804fb15acb00b04ad3ff53a87d51adc9d50de34cc06648130dd2ebe2c358612ac6d339171a9f088aeb18215200b5a8657443426b2f5415643587d9585a5d61bb7bd9e80ed721f417f45227c136f4e07c3c1f30faf06669a492634ac23086d5aa55d200e8af4840ab4f83d5eee16bff1cd2bca8cf5bf29dd9be2fa8e047c423da14231c0e000d8e3ac859dd1ec0eaedf5fc436a0fdec1d77dbaa8bac56dac131092362afb82da52fed9a3d58e8ee11dc67726f6e461f0f2f4cb25f582928c54da2f962ea97fc70698698c9341c60b312a6290577c2820e2fa6e7b76b08fe270bcfa8c1dbefbc2796d4bef0bc406220d5635ca0269b24ec755f96189dfad8c26b8ea34d6bcfd3f8d0eb1ba063203aac608bb633270eabeac58cb3590d3e11519db573a6bf9fb11e61801f9273080d8d5817aa786d5e3130e5670ac84fbb28fce066a634d56b4874a9d99ae71f33dc04e871b360a2581c3fba73b33cc187462161b58e3fa246b18100d370427e03e3d86ac01aa8eb66ca85e1d0d6b59137aeb946494d9426853a7f596974330f85e22df33ba2ff30ff383f09aa938b919772244e1713ec0b45373018841780d98ec11b04bc2fb40b38c9aa322736cd2ef22215a4d0eb12aa0ec7373ff5a53aca2b34552568dfb20335f3718bb89124289f6e489a1be838c338de2a290c01ad0a716d7b538ed6fc4f</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">当一切变成过往</summary>
    
    
    
    <category term="日记" scheme="https://chitanderu.github.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="感悟" scheme="https://chitanderu.github.io/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>雅思作文--科技</title>
    <link href="https://chitanderu.github.io/2023/11/01/techology/"/>
    <id>https://chitanderu.github.io/2023/11/01/techology/</id>
    <published>2023-11-01T00:00:00.000Z</published>
    <updated>2024-03-19T10:42:57.175Z</updated>
    
    <content type="html"><![CDATA[<h2 id="话题"><a class="markdownIt-Anchor" href="#话题"></a> 话题</h2><p>Some people think that robots are very important for humans’ future development. Others, however, think that robots are dangerous inventions that could have negative effects on society. Discuss both views and give your opinion.</p><h2 id="范文"><a class="markdownIt-Anchor" href="#范文"></a> 范文</h2><p><strong>As technology advances, robots have become increasingly prevalent in society. While some people believe that robots are necessary for the future growth of humanity, others argue that they pose a threat to society. In this essay, I will discuss both views and give my opinion on the matter.</strong></p><p><strong>On one hand, advocates of robots argue that they are crucial for human development. Firstly, robots can perform tasks that are too dangerous or difficult for humans, such as exploring space or deep sea exploration. Secondly, robots can help to increase efficiency and productivity in various industries, from manufacturing to healthcare. For example, robots can quickly and accurately assemble complex products, which could increase productivity and lower costs. Finally, robots can assist humans with various tasks, such as elderly care or assisting people with disabilities.</strong></p><p><strong>On the other hand, opponents of robots believe that they pose a danger to society. Firstly, robots could potentially replace human workers, leading to job loss and economic instability. Secondly, robots could malfunction and cause harm to humans. For example, autonomous vehicles have the potential to cause accidents if their programming is flawed. Finally, robots could be used for malicious purposes, such as drones being used to conduct surveillance or attacks.</strong></p><p><strong>In my opinion, while there are certainly risks associated with the use of robots, the benefits they offer outweigh the potential downsides. Robots have the potential to greatly improve human lives by performing tasks that are too dangerous or difficult for humans, increasing productivity and efficiency in various industries, and helping to provide care to those who need it. Of course, it is important to ensure that robots are used responsibly and that proper safety measures are in place to prevent accidents and misuse.</strong></p><p><strong>In conclusion, while some people view robots as a threat to society, others see them as necessary for human progress. While there are certainly risks associated with their use, I believe that robots offer many benefits that can greatly improve our lives if used responsibly.</strong></p><h2 id="表达总结"><a class="markdownIt-Anchor" href="#表达总结"></a> 表达总结</h2><ol><li>Introducing the topic and stating the two different views: “On the one hand, some people believe…On the other hand, others think…”</li><li>Using linking words and phrases to connect ideas and create a clear argument: “Moreover, Furthermore, In addition, However, On the contrary, In contrast, Although…”</li><li>Presenting evidence to support the argument: “For instance, According to, As a result, Additionally, Furthermore, Moreover, This is evidenced by, It is clear that…”</li><li>Using academic vocabulary and collocations: “Future development, Advancements in technology, Innovative solutions, Negative repercussions, Societal impact, Ethical concerns, Technological progress, Technological revolution, Artificial intelligence, Automation, Autonomous machines…”</li><li>Concluding with a balanced and thoughtful opinion: “In conclusion, while there are valid concerns about the potential negative effects of robots on society, it is clear that their benefits in terms of technological progress and innovative solutions make them a crucial component of humans’ future development.”</li></ol>]]></content>
    
    
    <summary type="html">technology</summary>
    
    
    
    <category term="积累" scheme="https://chitanderu.github.io/categories/%E7%A7%AF%E7%B4%AF/"/>
    
    
    <category term="英语" scheme="https://chitanderu.github.io/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>普通人可以幸福的过完一生吗？</title>
    <link href="https://chitanderu.github.io/2023/06/18/graduation/"/>
    <id>https://chitanderu.github.io/2023/06/18/graduation/</id>
    <published>2023-06-18T08:55:27.000Z</published>
    <updated>2024-09-25T13:10:39.893Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="93ba70c3b6fc3b2dc4f50d131de0f673edfec977242bb22384b0b3e681762aa4"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">毕业后的一些思考。</summary>
    
    
    
    <category term="感悟" scheme="https://chitanderu.github.io/categories/%E6%84%9F%E6%82%9F/"/>
    
    
    <category term="毕业" scheme="https://chitanderu.github.io/tags/%E6%AF%95%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>psv plus!</title>
    <link href="https://chitanderu.github.io/2023/06/12/psvday/"/>
    <id>https://chitanderu.github.io/2023/06/12/psvday/</id>
    <published>2023-06-12T10:45:47.566Z</published>
    <updated>2023-06-12T11:28:25.349Z</updated>
    
    <content type="html"><![CDATA[<h2 id="和小v的一个星期"><a class="markdownIt-Anchor" href="#和小v的一个星期"></a> 和小v的一个星期</h2><p>机缘巧合之下，拿起了吃灰尘许久的psv，进行了一系列的破解，成果如下。</p><div class="note success simple"><ol><li><p>更换了128g卡套，装满了游戏</p></li><li><p>更新了psp模拟器，可以搭载魔界战记2等古早游戏。</p></li><li><p>更换了toolbox2.0，以及vitashell</p></li><li><p>更换了psp主题和psv主题，成功进入psn</p></li><li><p>更新了金手指l+r，以及虚空幻界的代码列表。</p></li><li><p>圆梦一系列汉化游戏，</p></li><li><p>更新mai安装和nnpd安装，补丁相关温习了repatch的用法。</p></li></ol></div><h2 id="成果展示"><a class="markdownIt-Anchor" href="#成果展示"></a> 成果展示</h2><div class="gallery-container" data-type="data" data-button="" data-limit="10" data-first="10">    <div class="gallery-items">[{"url":"https://pic.imgdb.cn/item/6486fd8e1ddac507ccfc79d3.jpg","alt":"","title":""},{"url":"https://pic.imgdb.cn/item/6486fd8e1ddac507ccfc7a03.jpg","alt":"","title":""},{"url":"https://pic.imgdb.cn/item/6486fd8e1ddac507ccfc7992.jpg","alt":"","title":""},{"url":"https://pic.imgdb.cn/item/6486fd8e1ddac507ccfc7955.jpg","alt":"","title":""}]</div>  </div><h2 id="标签备份"><a class="markdownIt-Anchor" href="#标签备份"></a> 标签备份</h2><div class="note simple"><p>默认 提示块标签</p></div><div class="note default simple"><p>default 提示块标签</p></div><div class="note primary simple"><p>primary 提示块标签</p></div><div class="note success simple"><p>success 提示块标签</p></div><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div><div class="note danger simple"><p>danger 提示块标签</p></div>]]></content>
    
    
    <summary type="html">心血来潮的极客一天</summary>
    
    
    
    <category term="电子" scheme="https://chitanderu.github.io/categories/%E7%94%B5%E5%AD%90/"/>
    
    
    <category term="psv" scheme="https://chitanderu.github.io/tags/psv/"/>
    
    <category term="psp" scheme="https://chitanderu.github.io/tags/psp/"/>
    
  </entry>
  
  <entry>
    <title>A History of Protecting Freedom Where Law and Technology Collide</title>
    <link href="https://chitanderu.github.io/2023/05/01/HistoryofProtectingFreedom/"/>
    <id>https://chitanderu.github.io/2023/05/01/HistoryofProtectingFreedom/</id>
    <published>2023-05-01T00:00:00.000Z</published>
    <updated>2023-06-12T14:33:44.991Z</updated>
    
    <content type="html"><![CDATA[<h3 id="a-history-of-protecting-freedom-where-law-and-technology-collide"><a class="markdownIt-Anchor" href="#a-history-of-protecting-freedom-where-law-and-technology-collide"></a> A History of Protecting Freedom Where Law and Technology Collide</h3><p>The Electronic Frontier Foundation was founded in July of 1990 in response to a basic threat to speech and privacy. The United States Secret Service conducted a series of raids tracking the distribution of a document illegally copied from a BellSouth computer that described how the emergency 911 system worked, referred to as the E911 document. The Secret Service believed that if “hackers” knew how to use the telephone lines set aside for receiving emergency phone calls, the lines would become overloaded and people facing true emergencies would be unable to get through.</p><div class="note success simple"><p>Electronic Frontier Foundation 成立于 1990 年 7 月，旨在应对对言论和隐私的基本威胁。美国特勤局进行了一系列突击搜查，追踪从 BellSouth 计算机非法复制的一份文件的分发，该文件描述了紧急 911 系统的工作原理，称为 E911 文件。特勤局认为，如果“黑客”知道如何使用预留的电话线来接听紧急电话，电话线就会超载，真正紧急情况下的人将无法接通</p></div><p>One of the alleged recipients of the E911 document was the systems operator at a small games book publisher out of Austin, Texas, named Steve Jackson Games. The Secret Service executed a warrant against the innocent Jackson and took all electronic equipment and copies of an upcoming game book from Steve Jackson Games’ premises. Steve Jackson panicked as he watched the deadline come and go for his latest release and still hadn’t received his computers back. He was forced to lay off nearly half of his staff. In the end, the Secret Service returned all of Steve Jackson’s computers and decided not to press charges against the company, since they were unable to find any copies of the E911 document on any of the computers.</p><div class="note success simple"><p>据称，E911文件的其中一个收件人是得克萨斯州奥斯汀市的一家小型游戏书出版商史蒂夫·杰克逊游戏（Steve Jackson Games）的系统操作员。特勤局对无辜的杰克逊执行了搜查令，并拿走了史蒂夫·杰克逊游戏公司的所有电子设备和一本即将发布的游戏书的副本。当截止日期来临时，史蒂夫·杰克逊感到恐慌，他的电脑还没有归还。他被迫解雇了近一半的员工。最后，特勤局归还了史蒂夫·杰克逊的所有电脑，并决定不对该公司提起诉讼，因为他们无法在任何一台电脑上找到E911文件的任何副本</p></div><p>In the meantime, Steve Jackson’s business was nearly ruined. And when he and his employees had the opportunity to investigate the returned computers, they noticed that all of the electronic mail that had been stored on the company’s electronic bulletin board computer, where non-employee users had dialed in and sent personal messages to one another, had been individually accessed and deleted. Steve Jackson was furious, as he believed his rights as a publisher had been violated and the free speech and privacy rights of his users had been violated. Steve Jackson tried desperately to find a civil liberties group to help him, to no avail. Unfortunately, none of the existing groups understood the technology well enough to understand the importance of the issues.</p><div class="note success simple"><p>与此同时，史蒂夫·杰克逊的业务几乎被摧毁。当他和他的员工有机会调查归还的电脑时，他们注意到存储在公司的电子公告板计算机上的所有电子邮件都被逐个访问和删除了。史蒂夫·杰克逊非常愤怒，因为他认为作为出版商，他的权利受到了侵犯，他的用户的言论自由和隐私权也受到了侵犯。史蒂夫·杰克逊拼命地寻找一个能帮助他的公民自由团体，但徒劳无功。不幸的是，现有的团体都不够了解技术，无法理解这些问题的重要性。</p></div><p>In an electronic community called the Whole Earth 'Lectronic Link (now <a href="http://WELL.com">WELL.com</a>) several informed technologists understood exactly what civil liberties issues were involved. Mitch Kapor, former president of Lotus Development Corporation, John Perry Barlow, Wyoming cattle rancher and lyricist for the Grateful Dead, and John Gilmore, an early employee of Sun Microsystems, with assistance from Steve Wozniak, decided to do something about it. They formed an organization to work on civil liberties issues raised by new technologies. On the day they formally unveiled the new organization, they announced that they were representing Steve Jackson Games and several of the company’s bulletin board users in a lawsuit they were bringing against the United States Secret Service. The Electronic Frontier Foundation was born!</p><p>The Steve Jackson Games case turned out to be an extremely important one in the development of a proper legal framework for cyberspace. For the first time, a court held that electronic mail deserves at least as much protection as telephone calls. We take for granted today that law enforcement must have a warrant that particularly describes all electronic mail messages before seizing and reading them. The Steve Jackson Games case established that principle.</p><div class="note success simple"><p>在一个名为全地球’电子链接（<a href="http://xn--WELL-uh5f168b1u2c0pk.com">现在称为WELL.com</a>）的电子社区中，几位知情的技术专家准确地理解了涉及公民自由问题的技术问题。Mitch Kapor，莲花开发公司的前总裁，约翰·佩里·巴洛（John Perry Barlow），怀俄明州的牧场主和Grateful Dead的歌词作者，以及Sun Microsystems的早期员工约翰·吉尔莫（John Gilmore），在史蒂夫·沃兹尼亚克（Steve Wozniak）的帮助下，决定采取行动。他们成立了一个组织，致力于处理新技术引发的公民自由问题。在他们正式公布这个新组织的那天，他们宣布他们代表史蒂夫·杰克逊游戏公司以及几名该公司的公告板用户提起诉讼，针对美国特勤局。电子前沿基金会（Electronic Frontier Foundation）诞生了！</p><p>史蒂夫·杰克逊游戏案件在网络空间合适的法律框架发展中变得极为重要。首次有法院认定，电子邮件至少应该得到与电话通话相等的保护。如今我们认为执法部门必须在扣押和阅读电子邮件之前，获得明确描述所有电子邮件消息的搜查令是理所当然的。史蒂夫·杰克逊游戏案件确立了这一原则。</p></div><p>The Electronic Frontier Foundation continues to take on cases that set important precedents for the treatment of rights in cyberspace. In our second big case, <em>Bernstein v. U.S. Dept. of Justice</em>, the United States government prohibited a University of California mathematics Ph.D. student from publishing on the Internet an encryption computer program he had created. Encryption is a method for scrambling messages so they can only be understood by their intended recipients. Years before, the government had placed encryption on the United States Munitions List, alongside bombs and flamethrowers, as a weapon to be regulated for national security purposes. Companies and individuals exporting items on the munitions list, including software with encryption capabilities, had to obtain prior State Department approval.</p><p>Encryption export restrictions crippled American businesses and damaged the free speech rights of individuals. Critical for ecommerce, companies use encryption to safeguard sensitive information, such as credit card numbers, which they send or receive over electronic networks. Companies also secure access to software programs and provide system security using encryption. By limiting the export of encryption, technologies, and methods, the U.S. government drove development of security software overseas, where American companies were unable to compete.</p><div class="note success simple"><p>电子前沿基金会继续处理那些为网络空间权利确立重要先例的案件。在我们的第二个重要案件中，伯恩斯坦诉美国司法部（Bernstein v. U.S. Dept. of Justice）中，美国政府禁止了一名加利福尼亚大学的数学博士学生在互联网上发布他所创建的加密计算机程序。加密是一种将消息进行混淆，使其只能被预期的接收者理解的方法。多年前，政府将加密列入了美国军火清单，与炸弹和火焰喷射器并列，作为一种出于国家安全目的需要进行监管的武器。出口军火清单上的物品，包括具有加密功能的软件，必须获得国务院事先批准。</p><p>加密出口限制削弱了美国企业的竞争力，并损害了个人的言论自由权利。对于电子商务来说至关重要，企业使用加密来保护敏感信息，例如信用卡号码，在电子网络上发送或接收这些信息。企业还使用加密来保障对软件程序的访问和提供系统安全。通过限制加密技术和方法的出口，美国政府推动了安全软件在海外的发展，而美国企业无法竞争。</p></div><p>The State Department was unsympathetic to Bernstein’s situation and told Bernstein he would need a license to be an arms dealer before he could simply post the text of his encryption program on the Internet. They also told him that they would deny him an export license if he actually applied for one, because his technology was too secure.</p><p>The Electronic Frontier Foundation pulled together a top-notch legal team and sued the United States government on behalf of Dan Bernstein. The court ruled, for the first time ever, that written software code is speech protected by the First Amendment. The court further ruled that the export control laws on encryption violated Bernstein’s First Amendment rights by prohibiting his constitutionally protected speech. As a result, the government changed its export regulations. Now everyone has the right to “export” encryption software – by publishing it on the Internet – without prior permission from the U.S. government. Once again, the Electronic Frontier Foundation led the charge to establish important cyberspace rights.</p><div class="note success simple"><p>当丹·伯恩斯坦面临国务院要求他获得武器交易许可证才能在互联网上发布他的加密程序文本时，电子前沿基金会（EFF）对此表示了反对。EFF组织了一支高水平的法律团队，并代表伯恩斯坦对美国政府提起了诉讼。法庭第一次做出了重大裁决，认定书面软件代码属于受第一修正案保护的言论。此外，法庭还裁定加密出口管制法违反了伯恩斯坦的第一修正案权利，限制了他的受宪法保护的言论自由。作为诉讼结果，政府修改了出口监管法规，授予个人在互联网上发布加密软件的“出口”权利，无需事先获得美国政府的许可。电子前沿基金会在争取网络空间重要权利方面发挥了关键作用。</p></div><h2 id="todays-issues"><a class="markdownIt-Anchor" href="#todays-issues"></a> Today’s Issues</h2><p>While many early battles over the right to communicate freely and privately stemmed from government censorship, today EFF is fighting for users on many other fronts as well. Today, certain powerful corporations are attempting to shut down online speech, prevent new innovation from reaching consumers, and facilitating government surveillance. We challenge corporate overreach just as we challenge government abuses of power. We also develop technologies that can help individuals protect their privacy and security online, which our technologists build and release freely to the public for anyone to use. In addition, EFF is engaged in major legislative fights, beating back digital censorship bills disguised as intellectual property proposals, opposing attempts to force companies to spy on users, championing reform bills that rein in government surveillance, and much more . We are working with advocates worldwide to create a global digital environment that upholds both human rights and Constitutional rights, and we continue to take on cutting-edge legal cases to win victories for user rights.</p><div class="note success simple"><p>虽然早期围绕自由和隐私通信权利的斗争主要源于政府审查，但如今，电子前沿基金会（EFF）在许多其他方面也为用户而战。</p><p>如今，某些强大的企业试图关闭在线言论、阻止新创新技术传达给消费者，并促进政府监控。我们既挑战企业的过度行为，也挑战政府滥用权力。</p><p>我们还开发可以帮助个人保护在线隐私和安全的技术，我们的技术人员构建并自由发布给公众使用。</p><p>此外，EFF正在进行重大立法斗争，抵制伪装成知识产权提案的数字审查法案，反对迫使公司对用户进行监视的企图，倡导限制政府监控的改革法案等等。</p><p>我们正在与全球的倡导者合作，共同创建一个既维护人权又维护宪法权利的全球数字环境，我们继续处理前沿法律案件，争取为用户权益取得胜利。</p></div>]]></content>
    
    
    <summary type="html">文章翻译自 eff.org 官网 ，讲述了开源基金会的历史</summary>
    
    
    
    <category term="社会" scheme="https://chitanderu.github.io/categories/%E7%A4%BE%E4%BC%9A/"/>
    
    
    <category term="感悟" scheme="https://chitanderu.github.io/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>博客-我-毕业</title>
    <link href="https://chitanderu.github.io/2023/04/12/guradue/"/>
    <id>https://chitanderu.github.io/2023/04/12/guradue/</id>
    <published>2023-04-12T00:00:00.000Z</published>
    <updated>2024-09-25T13:10:41.234Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="abc5353904b6094ab3e0e8ecb45d966613a435a6619e7019d24568411a20717d"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">旅途</summary>
    
    
    
    <category term="感悟" scheme="https://chitanderu.github.io/categories/%E6%84%9F%E6%82%9F/"/>
    
    
    <category term="旅途" scheme="https://chitanderu.github.io/tags/%E6%97%85%E9%80%94/"/>
    
  </entry>
  
  <entry>
    <title>游戏轨迹-writing</title>
    <link href="https://chitanderu.github.io/2023/04/02/Untitled/"/>
    <id>https://chitanderu.github.io/2023/04/02/Untitled/</id>
    <published>2023-04-02T00:00:00.000Z</published>
    <updated>2024-09-25T13:13:38.859Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开始"><a class="markdownIt-Anchor" href="#开始"></a> 开始</h2><p>人生第一款游戏，儿童时光中由于向下没有网络，以前也没有手机的时候，是靠着外公买的盗版fc游戏碟接触了到许多游戏，</p><h2 id="电脑游戏的开端"><a class="markdownIt-Anchor" href="#电脑游戏的开端"></a> 电脑游戏的开端</h2><p>4399-淘米-摩尔庄园和赛尔号</p><h2 id="掌机的开端"><a class="markdownIt-Anchor" href="#掌机的开端"></a> 掌机的开端</h2><h2 id="我所热爱的开端"><a class="markdownIt-Anchor" href="#我所热爱的开端"></a> 我所热爱的开端</h2>]]></content>
    
    
    <summary type="html">game</summary>
    
    
    
    <category term="日记" scheme="https://chitanderu.github.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="成长" scheme="https://chitanderu.github.io/tags/%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>记忆的碎片-番剧篇</title>
    <link href="https://chitanderu.github.io/2023/04/01/memory/"/>
    <id>https://chitanderu.github.io/2023/04/01/memory/</id>
    <published>2023-04-01T00:00:00.000Z</published>
    <updated>2024-03-19T10:38:40.035Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="316586e1e5231292c72e89fe946152896f275eb519b56d662d9c73d57ebf7126">165d50f05814027fb7fe5e4ae8a088d8ed45cb227c5039853179c5405e990a0b95b6c3e6f4f810306daba2758cafb38fb19c1930642b19f6c3fad1867c7ca3aa48922cd428e433c659049ffacf156b8b71bd1da28bfe6bb6899b5c1a8ef670d6e4debcb8f2aa372524ad65221ddfc5f8cfd8e54fee5c9301c01b3df772ba32c367f636dfe6435efcb50c90163445f0eeb5a83d8db20b47992e3a1103d5c08cfb506ba5fb29a7a12e6f03ad56445edc9d219cf1adee8f8d935b91bcb0474acd2e5070731face7d945cd08a0a3bf6dff16b004e100d3e59eac3583dd2040b0142a5d6729fa9ef6e265bd0889681f5666e830859aabfa8ad13168826f2fa83f7403d7f76835b4e6185093cca90d816e76f2f22d3f6dcc2d7a80f2f921417ce15a54c3bacc718a8e4a7fb7766186913b70a3f0ef4b6460c0eb8e11eaeccf075b6ab52144bec275ac3272e8b843d2d595f9ab8fdfb9b7995a0773ec37d27cd90d0095f2cf9ca0de0ffbb71b708be4d197df19222e9252f2e855626f91cc20751fc7e92f5b89f7d6905011bef98ac3f44cb23a21ec5118296984101b7623df9f7468e5aff32541b64807503d1c26cc811798aead77a0bb5e92e63e515f139a9e7015b46dd7b0a6d7904082039c678c7767b5c077254758d7913417bef7cbee30adb3adb1525e5dec3ff43d94fe8d43b9416bbe125ba1f9f44fa22841a419be0c528fce2d41cd2cc1c9704acd26e926797aad1bf09e28ec2ce54efa0f94ebd82d04a4adcc3be7247ca4dce6d6b71b9ab322e96d105822fd83982b6c67a2f67f91f6192914c3c85e49006c96e816b0349e76f70b3633c9918c7fd57c83b777c63a636d0c0ca2957775efae49991d044e7f66dd6743c7e54d9e73c1c3bfb568bfcb3f7d839aa1c0098c94d8bf56d1e98cf579322f0771bac59a4e45efb4dd2c317435188d7028f1ae1d43cb7042d3c92f5a5badc70047b07340eecb2d05ee53cf27f0253dd040c66497eb37b4a9e0d36c5d08617c1cc2ec98f2f4d14ef6a1edb04d4fcbaac96f6c0c6b3ae803d970dd776c3e2bd2400fec37a773022711b89f23b3c3997b3980692c403562abc4c0c17185bcb7877b301da0c2a25c1a437f4f14f960c9d02e785e4b7fad57d48de17cdb93e20e8321b7e6b3367c3188c8defcf8aedabdf9f31aca5bc574e74ee9bad3870204c00828c4078c83ea55a7a8a369acfae6c4a8f29f2bd550d7648e27089e92ee465596d54b61dc9b2a438beafdcab2107040b5624ee0395f2de812c0e4c193287695cf6e516a27926c2b8e47290077556325d2ba8f8c545f527e374bd89bf223b09d1a81a6baa41ebf6ed5cc55f6ffcc6d5131707e2442a1ca0013e9f6bd211c66d419d0d6678a3df395546edfd30a6c0e0092ec230e4d1ef4cbdb728a2a589a6a821f2fca4e269256383b2e8fa7e60652942e641bb33733107b622f5ffebebb8a3bb35cb9319419da1ad28aacf2087432da6282a6a795284ac82ed0f97abae7f6349a1c7981259025f34bc57cbd73e774adc69cf0665cdbde947ffa5bf71bd08661c8ff85b7a1a0e3243fc43da5df0bcdc4dafab27e27052010bf66aff1f385b9d7b7d0a1dd26cc1099d7bbc716dc24fe792beedeb724b42fede9ea57155c3dee1835c8338110756f78d3325bc3a7d5798d9a031a815dc54ee099fbc8800c36a2dd43167965407cf14b06a81fc22e66c331865373393213a1ce213b0a725320cfc7dd91aa11a60c46672b1609228f0a2684fc0f31feca90a34c66c247d54565532fb7146a3153c3aafce74553143fb9ae33f19e091c9ee42209ebb882a39c7768a9e7e57b2a8e4087329010f37cf73183718c53dfce837c987d89ffb6591a35d2911d877544d2074c168cf9393a0401f467b7470ba577be1965e0cbfa612298a0ecf347b4d2323b1b1451ee4af482e6529b9af7bc21498b1d668e6e0a6622c98f5787d9bd5ec9c307d937218fd616879733dc82f81985a3b0a559070d02d631651437c283aef7045a84654b4ea89f0dce06d4b2f14ff8743f460e9927dcc1231445c10e9d60c51ab7676d5259f1b6f81f1a8828a1e07a116b3c2ca9e54cc16691acb9e3e15cee9d649b86b609880e6e71b7d6bf6fdc40b0fac02587816b5bfc50326e7b5861356dcafd9aafd6bea181825c330bf39418959f3942639ff138467b685e</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">memory</summary>
    
    
    
    <category term="回忆" scheme="https://chitanderu.github.io/categories/%E5%9B%9E%E5%BF%86/"/>
    
    
    <category term="动画" scheme="https://chitanderu.github.io/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>雅思作文积累</title>
    <link href="https://chitanderu.github.io/2023/04/01/newsqlist/"/>
    <id>https://chitanderu.github.io/2023/04/01/newsqlist/</id>
    <published>2023-04-01T00:00:00.000Z</published>
    <updated>2023-06-21T13:11:50.589Z</updated>
    
    <content type="html"><![CDATA[<h2 id="话题"><a class="markdownIt-Anchor" href="#话题"></a> 话题</h2><p>nowadays people spend more and more time away from their families why is this ，what effect will he have owned himself and their families。</p><h2 id="作文"><a class="markdownIt-Anchor" href="#作文"></a> 作文</h2><p>In recent years, it has become increasingly common for people to spend more time away from their families. This trend can be attributed to a number of factors, including the rise of technology, globalization, and demanding work schedules. While there are certainly benefits to this trend, it also has a number of negative effects on both individuals and their families.</p><p>One of the primary reasons why people are spending more time away from their families is the rise of technology. With the advent of the internet, people are now able to work from virtually anywhere in the world. This has made it possible for people to live and work in different parts of the world, far away from their families. Additionally, technology has made it easier for people to stay connected with their families, even when they are physically apart.</p><p>Another reason why people are spending more time away from their families is globalization. As more and more companies are expanding their operations globally, it has become increasingly common for employees to be transferred to different parts of the world. This has resulted in families having to live apart from one another, often for extended periods of time.</p><p>Finally, demanding work schedules also play a role in people spending more time away from their families. With the rise of the gig economy and the pressure to always be connected and available, many people are working longer hours and taking on multiple jobs in order to make ends meet. This often leaves them with little time to spend with their families.</p><p>While there are certainly benefits to spending more time away from one’s family, such as the opportunity to travel, explore new cultures, and advance one’s career, there are also negative effects. For individuals, this can lead to feelings of loneliness, isolation, and burnout. For families, it can result in strained relationships and a lack of communication.</p><p>In conclusion, while there are certainly benefits to spending more time away from one’s family, it is important to consider the negative effects it can have on both individuals and their families. It is important to find a balance between work and family, and to make time for the people who matter most to us.</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>好的！下面是我在这篇文章中使用的一些句型和高分表达：</p><ol><li>引入话题：In recent years, it has become increasingly common for people to spend more time away from their families.</li><li>说明原因：This trend can be attributed to a number of factors, including the rise of technology, globalization, and demanding work schedules.</li><li>提到反面效果：While there are certainly benefits to this trend, it also has a number of negative effects on both individuals and their families.</li><li>描述某一特定原因：One of the primary reasons why people are spending more time away from their families is the rise of technology.</li><li>使用并列结构：With the advent of the internet, people are now able to work from virtually anywhere in the world. This has made it possible for people to live and work in different parts of the world, far away from their families.</li><li>使用连词：While there are certainly benefits to spending more time away from one’s family, such as the opportunity to travel, explore new cultures, and advance one’s career, there are also negative effects.</li><li>总结结论：In conclusion, while there are certainly benefits to spending more time away from one’s family, it is important to consider the negative effects it can have on both individuals and their families.</li></ol><h3 id=""><a class="markdownIt-Anchor" href="#"></a> </h3><h2 id="题目2"><a class="markdownIt-Anchor" href="#题目2"></a> 题目2:</h2><p>人们在职业生涯和个人生活中敢于冒险是重要的。你认为冒险带来的好处是否超过了不利之处？</p><h2 id="作文-2"><a class="markdownIt-Anchor" href="#作文-2"></a> 作文</h2><p>Introduction: Taking risks is an essential aspect of human life, influencing both professional endeavors and personal experiences. This essay explores whether the benefits of embracing risks outweigh the potential drawbacks.</p><p>Body Paragraph 1 - Advantages of taking risks: One major advantage of taking risks is the opportunity for personal growth and development. By stepping out of their comfort zones, individuals can expand their horizons, acquire new skills, and gain valuable experiences. Risk-taking fosters innovation, as it encourages individuals to think creatively and seek unconventional solutions to problems. Moreover, taking calculated risks can lead to higher achievements and increased self-confidence, as individuals learn to overcome challenges and achieve their goals.</p><p>Body Paragraph 2 - Disadvantages of taking risks: While there are benefits to taking risks, it is important to acknowledge the potential disadvantages. One significant drawback is the possibility of failure or negative outcomes. When individuals take risks, there is always a chance of setbacks or losses, which can have adverse effects on their careers or personal lives. Additionally, risk-taking can be associated with increased stress and anxiety, as individuals navigate uncertain situations and face potential consequences. It is crucial for individuals to carefully assess the risks involved and make informed decisions to mitigate potential downsides.</p><p>Body Paragraph 3 - Weighing the advantages and disadvantages: When considering whether the benefits of taking risks outweigh the disadvantages, it is important to recognize that the outcome can vary depending on the context and individual circumstances. While risks can lead to failures and setbacks, they also present opportunities for growth and success. By embracing risks, individuals can gain valuable experiences, learn from their mistakes, and discover new possibilities. However, it is essential to strike a balance and approach risk-taking with careful consideration and calculated decisions.</p><p>Conclusion: In conclusion, taking risks can offer numerous advantages, including personal growth, innovation, and higher achievements. Although there are potential disadvantages such as failure and increased stress, the benefits of embracing risks often outweigh the drawbacks. It is crucial for individuals to assess risks prudently, make informed decisions, and embrace calculated risks to unlock their full potential in both their professional and personal lives.</p>]]></content>
    
    
    <summary type="html">nowadays people spend more and more time away from their families why is this what effect will he have owned himself and their families。</summary>
    
    
    
    <category term="积累" scheme="https://chitanderu.github.io/categories/%E7%A7%AF%E7%B4%AF/"/>
    
    
    <category term="英语" scheme="https://chitanderu.github.io/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>洛谷p1460-健康的奶牛</title>
    <link href="https://chitanderu.github.io/2022/03/12/luoguodfs/"/>
    <id>https://chitanderu.github.io/2022/03/12/luoguodfs/</id>
    <published>2022-03-12T00:00:00.000Z</published>
    <updated>2022-03-16T12:53:19.710Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p><img src="https://pic.imgdb.cn/item/622c98a65baa1a80abacd8ad.jpg" alt="" /></p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span>  <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e3</span>+<span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> niuneed[N];</span><br><span class="line"><span class="type">int</span> daily[N][N];</span><br><span class="line"><span class="type">int</span> v;</span><br><span class="line"><span class="type">int</span> st[N];</span><br><span class="line"><span class="type">int</span> g;</span><br><span class="line"><span class="type">int</span> min1=<span class="number">999999</span>;</span><br><span class="line"><span class="type">int</span> ans[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;  <span class="type">int</span> sum[v+<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=v;i++)</span><br><span class="line">       &#123;  </span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=g;j++)</span><br><span class="line">               &#123;</span><br><span class="line">                     <span class="keyword">if</span>(st[j]==<span class="number">1</span>)  <span class="comment">//这个选择了的话</span></span><br><span class="line">                       &#123;</span><br><span class="line">                           sum[i]+=daily[j][i];</span><br><span class="line">                           </span><br><span class="line">                       &#125;</span><br><span class="line"></span><br><span class="line">               &#125;</span><br><span class="line">           </span><br><span class="line">            <span class="comment">//cout&lt;&lt;sum[i]&lt;&lt;endl;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span>  i=<span class="number">1</span>;i&lt;=v;i++ )</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="keyword">if</span>(sum[i]&lt;niuneed[i])</span><br><span class="line">                <span class="keyword">return</span>  <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            &#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> <span class="literal">true</span>;       </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;    <span class="keyword">if</span>(t&gt;g)</span><br><span class="line">       &#123;  <span class="type">int</span> now=<span class="number">0</span>;</span><br><span class="line">          <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=g;i++)</span><br><span class="line">             <span class="keyword">if</span>(st[i]==<span class="number">1</span>)  </span><br><span class="line">                   &#123;       now++;&#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">check</span>())</span><br><span class="line">                 &#123;    <span class="comment">// cout&lt;&lt;&quot;use:&quot;&lt;&lt;now&lt;&lt;&quot; now min1 is&quot;&lt;&lt;min1&lt;&lt;endl;</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span>(now&lt;=min1)  <span class="comment">// 如果出现了新的答案 </span></span><br><span class="line">                       &#123;    <span class="built_in">memset</span>(ans,<span class="number">0</span>,<span class="keyword">sizeof</span> ans);  <span class="comment">//！！！！！！这很重要 一定要清空之前选择的饲料种类！@！！！！！  因为出现了更好的</span></span><br><span class="line">                           min1=now;</span><br><span class="line">                           </span><br><span class="line">                           <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=g;i++)</span><br><span class="line">                              &#123;   </span><br><span class="line">                                   <span class="keyword">if</span>(st[i]==<span class="number">1</span>)</span><br><span class="line">                                   &#123; ans[i]=<span class="number">1</span>;</span><br><span class="line">                                     </span><br><span class="line">                                    &#125;</span><br><span class="line">                              &#125;</span><br><span class="line">                       </span><br><span class="line">                       &#125;</span><br><span class="line">                  </span><br><span class="line">                  </span><br><span class="line">                 &#125;       </span><br><span class="line">                       </span><br><span class="line"></span><br><span class="line">           </span><br><span class="line">          <span class="keyword">return</span> ;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">  st[t]=<span class="number">2</span>;</span><br><span class="line">  <span class="built_in">dfs</span>(t+<span class="number">1</span>);</span><br><span class="line">  st[t]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  st[t]=<span class="number">1</span>;</span><br><span class="line">  <span class="built_in">dfs</span>(t+<span class="number">1</span>);</span><br><span class="line">  st[t]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;  cin&gt;&gt;v;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=v;i++)</span><br><span class="line">     &#123;</span><br><span class="line">         cin&gt;&gt;niuneed[i];</span><br><span class="line">     &#125;</span><br><span class="line">   cin&gt;&gt;g;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=g;i++)</span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=v;j++)  </span><br><span class="line">          &#123;</span><br><span class="line">              cin&gt;&gt;daily[i][j];</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  cout&lt;&lt;min1&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=g;i++)</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">if</span>(ans[i]==<span class="number">1</span>)</span><br><span class="line">            cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>本质是一个指数型枚举(选还是不选?)，在到达了递归的终点之后。检验选了的饲料里面的n种成分是否可以满足要求，可以的话则将原先的ans初始化，之后在更新答案。</p><h2 id="注意事项"><a class="markdownIt-Anchor" href="#注意事项"></a> 注意事项</h2><p>当我们遍历完一种情况或者找到一种更好的情况，一定要记得将原来答案初始化！也就是恢复现场，这是搜索经常要注意的。</p>]]></content>
    
    
    <summary type="html">dfs</summary>
    
    
    
    <category term="算法" scheme="https://chitanderu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="搜索" scheme="https://chitanderu.github.io/categories/%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2/"/>
    
    
    <category term="dfs" scheme="https://chitanderu.github.io/tags/dfs/"/>
    
    <category term="题解" scheme="https://chitanderu.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
    <category term="洛谷" scheme="https://chitanderu.github.io/tags/%E6%B4%9B%E8%B0%B7/"/>
    
  </entry>
  
  <entry>
    <title>洛谷p1036-选数</title>
    <link href="https://chitanderu.github.io/2022/02/21/luogupra5/"/>
    <id>https://chitanderu.github.io/2022/02/21/luogupra5/</id>
    <published>2022-02-21T00:00:00.000Z</published>
    <updated>2022-03-07T09:08:50.262Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p><img src="https://all.czse7cxw.xyz/item/6213ad5d184cd92e8c242341.jpg" alt="" /></p><h2 id="题解代码"><a class="markdownIt-Anchor" href="#题解代码"></a> 题解代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 4 3</span></span><br><span class="line"><span class="comment">// 3 7 12 19</span></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>  haduse[N];</span><br><span class="line"><span class="type">int</span>  num[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isprime</span><span class="params">(<span class="type">int</span> num)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=<span class="built_in">sqrt</span>(num);i++)</span><br><span class="line">               &#123; </span><br><span class="line">                    <span class="keyword">if</span>(num%i==<span class="number">0</span>)</span><br><span class="line">                       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                      </span><br><span class="line"></span><br><span class="line">               &#125;</span><br><span class="line">                  </span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> start)</span>  <span class="comment">//start指的是当前最小开始枚举的数字</span></span></span><br><span class="line"><span class="function">   </span>&#123;    <span class="comment">//递归的结束条件  use等于所选的m的时候</span></span><br><span class="line">       <span class="keyword">if</span>(u==m+<span class="number">1</span>) <span class="comment">//生成一个全排列对应的下标</span></span><br><span class="line">            &#123;   <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">              <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">                  &#123; <span class="comment">//cout&lt;&lt;num[haduse[i]]&lt;&lt;&quot; &quot;;</span></span><br><span class="line">                     </span><br><span class="line">                      sum+=num[haduse[i]];</span><br><span class="line">                       <span class="keyword">if</span>(i==m)</span><br><span class="line">                           &#123;  <span class="comment">//cout&lt;&lt;sum&lt;&lt;endl;</span></span><br><span class="line">                               <span class="keyword">if</span>(<span class="built_in">isprime</span>(sum)) ans++;</span><br><span class="line">                           &#125;</span><br><span class="line">                      &#125;</span><br><span class="line">                 <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">         </span><br><span class="line">         <span class="comment">//从当前start开始枚举</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=start; i&lt;=n;i++)</span><br><span class="line">                 &#123;    haduse[u]=i;</span><br><span class="line">                      <span class="built_in">dfs</span>(u+<span class="number">1</span>,i+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                      haduse[u]=<span class="number">0</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;   cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                 cin&gt;&gt;num[i];</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">      </span><br><span class="line">       <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">       </span><br><span class="line">   </span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">枚举模板中组合排列的经典应用。</summary>
    
    
    
    <category term="算法" scheme="https://chitanderu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="搜索" scheme="https://chitanderu.github.io/categories/%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2/"/>
    
    
    <category term="dfs" scheme="https://chitanderu.github.io/tags/dfs/"/>
    
    <category term="题解" scheme="https://chitanderu.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
    <category term="全排列" scheme="https://chitanderu.github.io/tags/%E5%85%A8%E6%8E%92%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>洛谷p1147-连续自然数和</title>
    <link href="https://chitanderu.github.io/2022/02/20/luogupra3/"/>
    <id>https://chitanderu.github.io/2022/02/20/luogupra3/</id>
    <published>2022-02-20T00:00:00.000Z</published>
    <updated>2022-03-07T09:08:13.704Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p><img src="https://all.czse7cxw.xyz/item/6213aa21184cd92e8c1f3cef.jpg" alt="" /></p><h2 id="题解代码"><a class="markdownIt-Anchor" href="#题解代码"></a> 题解代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2</span>*<span class="number">10e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"> </span><br><span class="line">ll n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;  cin&gt;&gt;n;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n/<span class="number">2</span>;i++)</span><br><span class="line">          </span><br><span class="line">       &#123;   ll l=<span class="number">1</span>; ll r=n/<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">           <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">           <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">            &#123;  ll mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">               ll sum=(i+mid)*(mid-i+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">               <span class="keyword">if</span>(sum&gt;=n)  r=mid;</span><br><span class="line">               <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">         </span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>((i+l)*(l-i+<span class="number">1</span>)/<span class="number">2</span>==n)</span><br><span class="line">              cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;l&lt;&lt;endl;</span><br><span class="line">             </span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目思路"><a class="markdownIt-Anchor" href="#题目思路"></a> 题目思路</h2>]]></content>
    
    
    <summary type="html">二分算法的模板二 求区间最大值</summary>
    
    
    
    <category term="算法" scheme="https://chitanderu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="二分" scheme="https://chitanderu.github.io/categories/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86/"/>
    
    
    <category term="题解" scheme="https://chitanderu.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
    <category term="洛谷" scheme="https://chitanderu.github.io/tags/%E6%B4%9B%E8%B0%B7/"/>
    
    <category term="二分" scheme="https://chitanderu.github.io/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>递归归纳</title>
    <link href="https://chitanderu.github.io/2022/02/18/search/"/>
    <id>https://chitanderu.github.io/2022/02/18/search/</id>
    <published>2022-02-18T00:00:00.000Z</published>
    <updated>2023-04-16T11:43:12.979Z</updated>
    
    <content type="html"><![CDATA[<h2 id="普通枚举-普通指数级枚举"><a class="markdownIt-Anchor" href="#普通枚举-普通指数级枚举"></a> 普通枚举 普通指数级枚举</h2><p>💙</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> st[N];   <span class="comment">//0还没有选择  1选择  2不选</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;     <span class="comment">//终止条件</span></span><br><span class="line">    <span class="keyword">if</span>(c&gt;n)</span><br><span class="line">       &#123; </span><br><span class="line">          <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)  </span><br><span class="line">               &#123;   <span class="keyword">if</span>(st[i]==<span class="number">1</span>)   <span class="comment">//被选中了</span></span><br><span class="line">                         cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">                       </span><br><span class="line">               &#125;</span><br><span class="line">                    cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">                   <span class="keyword">return</span> ; </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    st[c]=<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(c+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    st[c]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    st[c]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(c+<span class="number">1</span>);</span><br><span class="line">    st[c]=<span class="number">0</span>; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="输出结果"><a class="markdownIt-Anchor" href="#输出结果"></a> 输出结果:</h3><p>输入</p><p>3</p><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">3 </span><br><span class="line">2 </span><br><span class="line">2 3 </span><br><span class="line">1 </span><br><span class="line">1 3 </span><br><span class="line">1 2 </span><br><span class="line">1 2 3 </span><br></pre></td></tr></table></figure><h2 id="全排列型枚举"><a class="markdownIt-Anchor" href="#全排列型枚举"></a> 全排列型枚举</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">16</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> use[N];</span><br><span class="line"><span class="type">int</span> st[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">void</span>  <span class="title">dfs</span><span class="params">(<span class="type">int</span> num)</span>   <span class="comment">//枚举第num个数字  此时num还没有赋予具体的数值</span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(num&gt;n) &#123; </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                cout&lt;&lt;st[i]&lt;&lt;<span class="string">&quot; &quot;</span>;  </span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">         cout&lt;&lt;endl;                      </span><br><span class="line">        <span class="keyword">return</span>  ;&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">       &#123;   </span><br><span class="line">           <span class="keyword">if</span>(use[i]==<span class="literal">false</span>)</span><br><span class="line">           </span><br><span class="line">           &#123;use[i]=<span class="literal">true</span>;  <span class="comment">//第数字i被用了 </span></span><br><span class="line">            st[num]=i;     <span class="comment">//将数字i赋值于 num（枚举的一个数字）</span></span><br><span class="line">            <span class="built_in">dfs</span>(num+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            use[i]=<span class="literal">false</span>;</span><br><span class="line">            st[num]=<span class="number">0</span>;     </span><br><span class="line">            </span><br><span class="line">             &#125;<span class="comment">//恢复现场</span></span><br><span class="line">           </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="输出结果-2"><a class="markdownIt-Anchor" href="#输出结果-2"></a> 输出结果:</h3><p>输入</p><p>3</p><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 2 3 </span><br><span class="line">1 3 2 </span><br><span class="line">2 1 3 </span><br><span class="line">2 3 1 </span><br><span class="line">3 1 2 </span><br><span class="line">3 2 1 </span><br></pre></td></tr></table></figure><h2 id="组合型枚举-字典序升序"><a class="markdownIt-Anchor" href="#组合型枚举-字典序升序"></a> 组合型枚举 字典序升序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从 1∼n</span></span><br><span class="line"><span class="comment">//  这 n</span></span><br><span class="line"><span class="comment">//  个整数中随机选出 m 个，输出所有可能的选择方案。</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入格式</span></span><br><span class="line"><span class="comment">// 两个整数 n,m</span></span><br><span class="line"><span class="comment">//  ,在同一行用空格隔开。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出格式</span></span><br><span class="line"><span class="comment">// 按照从小到大的顺序输出所有方案，每行 1个。</span></span><br><span class="line"><span class="comment">//  个</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 首先，同一行内的数升序排列，相邻两个数用一个空格隔开。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 其次，对于两个不同的行，对应下标的数一一比较，字典序较小的排在前面（例如 1 3 5 7 排在 1 3 6 8 前面）。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> way[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> use,<span class="type">int</span> start)</span>  <span class="comment">//use 指的是当前枚举到哪个位置，start指的是目前从哪个位置开始枚举 即是从最小的位置开始枚举</span></span></span><br><span class="line"><span class="function">  </span>&#123;   </span><br><span class="line">       <span class="comment">//递归结束条件</span></span><br><span class="line">       <span class="keyword">if</span>(use==m+<span class="number">1</span>) </span><br><span class="line">         &#123;   </span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">                  &#123;</span><br><span class="line">                      cout&lt;&lt;way[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">                  &#125;   </span><br><span class="line">             cout&lt;&lt;endl;</span><br><span class="line">             <span class="keyword">return</span>;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;=n;i++)</span><br><span class="line">           &#123;</span><br><span class="line">                way[use]=i ;  <span class="comment">//当前枚举到use位置  循环赋值</span></span><br><span class="line">                <span class="built_in">dfs</span>(use+<span class="number">1</span>,i+<span class="number">1</span>);<span class="comment">//继续枚举下一个位置 </span></span><br><span class="line">                way[use]=<span class="number">0</span>;  <span class="comment">//，枚举完一论循环之后  恢复现场</span></span><br><span class="line">                 </span><br><span class="line">                 </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">         </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   cin&gt;&gt;n&gt;&gt;m;  </span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出结果-3"><a class="markdownIt-Anchor" href="#输出结果-3"></a> 输出结果:</h3><p>输入 5 3</p><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1 2 3 </span><br><span class="line">1 2 4 </span><br><span class="line">1 2 5 </span><br><span class="line">1 3 4 </span><br><span class="line">1 3 5 </span><br><span class="line">1 4 5 </span><br><span class="line">2 3 4 </span><br><span class="line">2 3 5 </span><br><span class="line">2 4 5 </span><br><span class="line">3 4 5 </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">几个较为基础的搜索模板法</summary>
    
    
    
    <category term="算法" scheme="https://chitanderu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="搜索" scheme="https://chitanderu.github.io/categories/%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2/"/>
    
    
    <category term="递归" scheme="https://chitanderu.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
    <category term="搜索" scheme="https://chitanderu.github.io/tags/%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>洛谷p2678-跳石头</title>
    <link href="https://chitanderu.github.io/2022/02/16/luogupra2/"/>
    <id>https://chitanderu.github.io/2022/02/16/luogupra2/</id>
    <published>2022-02-16T00:00:00.000Z</published>
    <updated>2022-03-14T13:13:05.293Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p><img src="https://pic.imgdb.cn/item/622f3f4b5baa1a80abdc339c.jpg" alt="" /></p><h2 id="算法代码"><a class="markdownIt-Anchor" href="#算法代码"></a> 算法代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//题目要求什么 就对什么进行二分</span></span><br><span class="line"><span class="comment">//分析题目意义 意思为找出又一个最短距离ans 使得每个石头的两两相应距离x 都比这个ans大  并且这个最短距要最大   求区间最大值 此时区间的单调性都为单调递增 因此得出结论可以使用二分算法</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">50010</span>;</span><br><span class="line"><span class="type">int</span>   shitou[N];</span><br><span class="line"><span class="type">int</span>  l,n,m;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> mid)</span></span></span><br><span class="line"><span class="function"></span>&#123;    <span class="type">int</span> use=<span class="number">0</span>;</span><br><span class="line">     <span class="type">int</span> first=<span class="number">0</span>;  <span class="comment">//从起点开始遍历</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;   <span class="keyword">if</span>(shitou[i]-first&lt;mid) &#123; use++; &#125;<span class="comment">//如果有一对石头的相邻距离比这个二分的距离小 那么不符合要求</span></span><br><span class="line">            <span class="keyword">else</span> first=shitou[i];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> use&lt;=m;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;  cin&gt;&gt;l&gt;&gt;n&gt;&gt;m ;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">      &#123;  </span><br><span class="line">            cin&gt;&gt;shitou[i];  </span><br><span class="line">      &#125;</span><br><span class="line">      shitou[++n]=l;  <span class="comment">//最后一个终点的坐标</span></span><br><span class="line">     <span class="type">int</span> l=<span class="number">0</span>;<span class="type">int</span> r=<span class="number">1e9</span>+<span class="number">10</span>;</span><br><span class="line">     <span class="keyword">while</span>(l&lt;r) </span><br><span class="line">     &#123;  <span class="type">int</span> mid=l+r+<span class="number">1</span>&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(mid)) l=mid;</span><br><span class="line">         <span class="keyword">else</span>  r=mid<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">   cout&lt;&lt;r;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="图解"><a class="markdownIt-Anchor" href="#图解"></a> 图解</h2>]]></content>
    
    
    <summary type="html">二分算法的模板二 求区间最大值 二分算法的经典应用。</summary>
    
    
    
    <category term="算法" scheme="https://chitanderu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="二分" scheme="https://chitanderu.github.io/categories/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86/"/>
    
    
    <category term="题解" scheme="https://chitanderu.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
    <category term="洛谷" scheme="https://chitanderu.github.io/tags/%E6%B4%9B%E8%B0%B7/"/>
    
    <category term="二分" scheme="https://chitanderu.github.io/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
</feed>
